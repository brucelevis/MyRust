// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `base.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct Test {
    // message fields
    pub cmd: u32,
    pub userId: u32,
    pub body: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Test {
    fn default() -> &'a Test {
        <Test as ::protobuf::Message>::default_instance()
    }
}

impl Test {
    pub fn new() -> Test {
        ::std::default::Default::default()
    }

    // uint32 cmd = 1;


    pub fn get_cmd(&self) -> u32 {
        self.cmd
    }
    pub fn clear_cmd(&mut self) {
        self.cmd = 0;
    }

    // Param is passed by value, moved
    pub fn set_cmd(&mut self, v: u32) {
        self.cmd = v;
    }

    // uint32 userId = 2;


    pub fn get_userId(&self) -> u32 {
        self.userId
    }
    pub fn clear_userId(&mut self) {
        self.userId = 0;
    }

    // Param is passed by value, moved
    pub fn set_userId(&mut self, v: u32) {
        self.userId = v;
    }

    // bytes body = 3;


    pub fn get_body(&self) -> &[u8] {
        &self.body
    }
    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: ::std::vec::Vec<u8>) {
        self.body = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.body
    }

    // Take field
    pub fn take_body(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.body, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Test {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.cmd = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.userId = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.body)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.cmd != 0 {
            my_size += ::protobuf::rt::value_size(1, self.cmd, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.userId != 0 {
            my_size += ::protobuf::rt::value_size(2, self.userId, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.body.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.body);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.cmd != 0 {
            os.write_uint32(1, self.cmd)?;
        }
        if self.userId != 0 {
            os.write_uint32(2, self.userId)?;
        }
        if !self.body.is_empty() {
            os.write_bytes(3, &self.body)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Test {
        Test::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "cmd",
                    |m: &Test| { &m.cmd },
                    |m: &mut Test| { &mut m.cmd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "userId",
                    |m: &Test| { &m.userId },
                    |m: &mut Test| { &mut m.userId },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "body",
                    |m: &Test| { &m.body },
                    |m: &mut Test| { &mut m.body },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Test>(
                    "Test",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Test {
        static mut instance: ::protobuf::lazy::Lazy<Test> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Test,
        };
        unsafe {
            instance.get(Test::new)
        }
    }
}

impl ::protobuf::Clear for Test {
    fn clear(&mut self) {
        self.cmd = 0;
        self.userId = 0;
        self.body.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Test {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Test {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct loginReq {
    // message fields
    pub userId: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a loginReq {
    fn default() -> &'a loginReq {
        <loginReq as ::protobuf::Message>::default_instance()
    }
}

impl loginReq {
    pub fn new() -> loginReq {
        ::std::default::Default::default()
    }

    // uint32 userId = 1;


    pub fn get_userId(&self) -> u32 {
        self.userId
    }
    pub fn clear_userId(&mut self) {
        self.userId = 0;
    }

    // Param is passed by value, moved
    pub fn set_userId(&mut self, v: u32) {
        self.userId = v;
    }
}

impl ::protobuf::Message for loginReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.userId = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.userId != 0 {
            my_size += ::protobuf::rt::value_size(1, self.userId, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.userId != 0 {
            os.write_uint32(1, self.userId)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> loginReq {
        loginReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "userId",
                    |m: &loginReq| { &m.userId },
                    |m: &mut loginReq| { &mut m.userId },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<loginReq>(
                    "loginReq",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static loginReq {
        static mut instance: ::protobuf::lazy::Lazy<loginReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const loginReq,
        };
        unsafe {
            instance.get(loginReq::new)
        }
    }
}

impl ::protobuf::Clear for loginReq {
    fn clear(&mut self) {
        self.userId = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for loginReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for loginReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct loginRsp {
    // message fields
    pub userId: u32,
    pub account: ::std::string::String,
    pub channel: ::std::string::String,
    pub platform: ::std::string::String,
    pub gold: f64,
    pub token: ::std::string::String,
    pub login_time: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a loginRsp {
    fn default() -> &'a loginRsp {
        <loginRsp as ::protobuf::Message>::default_instance()
    }
}

impl loginRsp {
    pub fn new() -> loginRsp {
        ::std::default::Default::default()
    }

    // uint32 userId = 1;


    pub fn get_userId(&self) -> u32 {
        self.userId
    }
    pub fn clear_userId(&mut self) {
        self.userId = 0;
    }

    // Param is passed by value, moved
    pub fn set_userId(&mut self, v: u32) {
        self.userId = v;
    }

    // string account = 2;


    pub fn get_account(&self) -> &str {
        &self.account
    }
    pub fn clear_account(&mut self) {
        self.account.clear();
    }

    // Param is passed by value, moved
    pub fn set_account(&mut self, v: ::std::string::String) {
        self.account = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account(&mut self) -> &mut ::std::string::String {
        &mut self.account
    }

    // Take field
    pub fn take_account(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.account, ::std::string::String::new())
    }

    // string channel = 3;


    pub fn get_channel(&self) -> &str {
        &self.channel
    }
    pub fn clear_channel(&mut self) {
        self.channel.clear();
    }

    // Param is passed by value, moved
    pub fn set_channel(&mut self, v: ::std::string::String) {
        self.channel = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_channel(&mut self) -> &mut ::std::string::String {
        &mut self.channel
    }

    // Take field
    pub fn take_channel(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.channel, ::std::string::String::new())
    }

    // string platform = 4;


    pub fn get_platform(&self) -> &str {
        &self.platform
    }
    pub fn clear_platform(&mut self) {
        self.platform.clear();
    }

    // Param is passed by value, moved
    pub fn set_platform(&mut self, v: ::std::string::String) {
        self.platform = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_platform(&mut self) -> &mut ::std::string::String {
        &mut self.platform
    }

    // Take field
    pub fn take_platform(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.platform, ::std::string::String::new())
    }

    // double gold = 5;


    pub fn get_gold(&self) -> f64 {
        self.gold
    }
    pub fn clear_gold(&mut self) {
        self.gold = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gold(&mut self, v: f64) {
        self.gold = v;
    }

    // string token = 6;


    pub fn get_token(&self) -> &str {
        &self.token
    }
    pub fn clear_token(&mut self) {
        self.token.clear();
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::std::string::String) {
        self.token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::std::string::String {
        &mut self.token
    }

    // Take field
    pub fn take_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.token, ::std::string::String::new())
    }

    // uint32 login_time = 7;


    pub fn get_login_time(&self) -> u32 {
        self.login_time
    }
    pub fn clear_login_time(&mut self) {
        self.login_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_login_time(&mut self, v: u32) {
        self.login_time = v;
    }
}

impl ::protobuf::Message for loginRsp {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.userId = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.account)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.channel)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.platform)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.gold = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.token)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.login_time = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.userId != 0 {
            my_size += ::protobuf::rt::value_size(1, self.userId, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.account.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.account);
        }
        if !self.channel.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.channel);
        }
        if !self.platform.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.platform);
        }
        if self.gold != 0. {
            my_size += 9;
        }
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.token);
        }
        if self.login_time != 0 {
            my_size += ::protobuf::rt::value_size(7, self.login_time, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.userId != 0 {
            os.write_uint32(1, self.userId)?;
        }
        if !self.account.is_empty() {
            os.write_string(2, &self.account)?;
        }
        if !self.channel.is_empty() {
            os.write_string(3, &self.channel)?;
        }
        if !self.platform.is_empty() {
            os.write_string(4, &self.platform)?;
        }
        if self.gold != 0. {
            os.write_double(5, self.gold)?;
        }
        if !self.token.is_empty() {
            os.write_string(6, &self.token)?;
        }
        if self.login_time != 0 {
            os.write_uint32(7, self.login_time)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> loginRsp {
        loginRsp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "userId",
                    |m: &loginRsp| { &m.userId },
                    |m: &mut loginRsp| { &mut m.userId },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "account",
                    |m: &loginRsp| { &m.account },
                    |m: &mut loginRsp| { &mut m.account },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "channel",
                    |m: &loginRsp| { &m.channel },
                    |m: &mut loginRsp| { &mut m.channel },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "platform",
                    |m: &loginRsp| { &m.platform },
                    |m: &mut loginRsp| { &mut m.platform },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "gold",
                    |m: &loginRsp| { &m.gold },
                    |m: &mut loginRsp| { &mut m.gold },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "token",
                    |m: &loginRsp| { &m.token },
                    |m: &mut loginRsp| { &mut m.token },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "login_time",
                    |m: &loginRsp| { &m.login_time },
                    |m: &mut loginRsp| { &mut m.login_time },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<loginRsp>(
                    "loginRsp",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static loginRsp {
        static mut instance: ::protobuf::lazy::Lazy<loginRsp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const loginRsp,
        };
        unsafe {
            instance.get(loginRsp::new)
        }
    }
}

impl ::protobuf::Clear for loginRsp {
    fn clear(&mut self) {
        self.userId = 0;
        self.account.clear();
        self.channel.clear();
        self.platform.clear();
        self.gold = 0.;
        self.token.clear();
        self.login_time = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for loginRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for loginRsp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nbase.proto\x12\x06protos\"D\n\x04Test\x12\x10\n\x03cmd\x18\x01\x20\
    \x01(\rR\x03cmd\x12\x16\n\x06userId\x18\x02\x20\x01(\rR\x06userId\x12\
    \x12\n\x04body\x18\x03\x20\x01(\x0cR\x04body\"\"\n\x08loginReq\x12\x16\n\
    \x06userId\x18\x01\x20\x01(\rR\x06userId\"\xbb\x01\n\x08loginRsp\x12\x16\
    \n\x06userId\x18\x01\x20\x01(\rR\x06userId\x12\x18\n\x07account\x18\x02\
    \x20\x01(\tR\x07account\x12\x18\n\x07channel\x18\x03\x20\x01(\tR\x07chan\
    nel\x12\x1a\n\x08platform\x18\x04\x20\x01(\tR\x08platform\x12\x12\n\x04g\
    old\x18\x05\x20\x01(\x01R\x04gold\x12\x14\n\x05token\x18\x06\x20\x01(\tR\
    \x05token\x12\x1d\n\nlogin_time\x18\x07\x20\x01(\rR\tloginTimeb\x06proto\
    3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
