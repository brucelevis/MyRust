{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0","program":"C:\\Users\\Administrator\\.rustup\\toolchains\\stable-x86_64-pc-windows-gnu\\bin\\rls.exe","arguments":["--edition=2018","--crate-name","redis","C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"executor\"","--cfg","feature=\"geospatial\"","--cfg","feature=\"tokio-executor\"","-C","metadata=1b7256845e856e9e","-C","extra-filename=-1b7256845e856e9e","--out-dir","f:\\rust\\MyRust\\gateserver\\target\\rls\\debug\\deps","-L","dependency=f:\\rust\\MyRust\\gateserver\\target\\rls\\debug\\deps","--extern","bytes=f:\\rust\\MyRust\\gateserver\\target\\rls\\debug\\deps\\libbytes-0c16a312ab3844d2.rmeta","--extern","combine=f:\\rust\\MyRust\\gateserver\\target\\rls\\debug\\deps\\libcombine-31c435d539eeec6c.rmeta","--extern","dtoa=f:\\rust\\MyRust\\gateserver\\target\\rls\\debug\\deps\\libdtoa-8604e339c4aed049.rmeta","--extern","futures=f:\\rust\\MyRust\\gateserver\\target\\rls\\debug\\deps\\libfutures-515f9cc980c58ef6.rmeta","--extern","itoa=f:\\rust\\MyRust\\gateserver\\target\\rls\\debug\\deps\\libitoa-341f7a9a99273c63.rmeta","--extern","percent_encoding=f:\\rust\\MyRust\\gateserver\\target\\rls\\debug\\deps\\libpercent_encoding-79b5a5c371121707.rmeta","--extern","sha1=f:\\rust\\MyRust\\gateserver\\target\\rls\\debug\\deps\\libsha1-8c198505c45a5814.rmeta","--extern","tokio_codec=f:\\rust\\MyRust\\gateserver\\target\\rls\\debug\\deps\\libtokio_codec-8abc4e80c1e0e103.rmeta","--extern","tokio_executor=f:\\rust\\MyRust\\gateserver\\target\\rls\\debug\\deps\\libtokio_executor-59b5d4b5d779eace.rmeta","--extern","tokio_io=f:\\rust\\MyRust\\gateserver\\target\\rls\\debug\\deps\\libtokio_io-fad73accb1e40c40.rmeta","--extern","tokio_sync=f:\\rust\\MyRust\\gateserver\\target\\rls\\debug\\deps\\libtokio_sync-06821072121365e0.rmeta","--extern","tokio_tcp=f:\\rust\\MyRust\\gateserver\\target\\rls\\debug\\deps\\libtokio_tcp-ad0d65763399d72b.rmeta","--extern","url=f:\\rust\\MyRust\\gateserver\\target\\rls\\debug\\deps\\liburl-c9529e5aa7e44079.rmeta","--cap-lints","allow","-L","native=C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\winapi-x86_64-pc-windows-gnu-0.4.0\\lib","--error-format=json","--sysroot","C:\\Users\\Administrator\\.rustup/toolchains/stable-x86_64-pc-windows-gnu"],"output":"f:\\rust\\MyRust\\gateserver\\target\\rls\\debug\\deps\\libredis-1b7256845e856e9e.rmeta"},"prelude":{"crate_id":{"name":"redis","disambiguator":[16284682380762587950,10876099500341135072]},"crate_root":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src","external_crates":[{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[17754226726312282658,4076905949603487160]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[14440509561659192608,317633866642573698]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[16214886559712252845,1623273168981509368]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[3509281774579603838,13144099113451520591]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[11501227129415035301,2278099145643430660]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[4852698717079168062,8821218321849336759]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[2970414798178766284,12464411377570547827]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[18043833326731472338,16860295939395283854]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[3938440098624159483,15371459087357312146]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[10824472699003730294,5430748819956168801]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[15385697880778141559,4635661529098517216]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[7251163173618888154,296046126038531172]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[3425786209665352775,2104592579185322956]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[4242707251431438356,10403915645989066416]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","num":15,"id":{"name":"tokio_codec","disambiguator":[4714588337509142113,7410439046480160245]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\parser.rs","num":16,"id":{"name":"bytes","disambiguator":[13978762792583775801,13385319453859686758]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","num":17,"id":{"name":"byteorder","disambiguator":[12544505506035502760,14398789519270791592]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","num":18,"id":{"name":"iovec","disambiguator":[2003997575294476822,15428877622646470555]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","num":19,"id":{"name":"tokio_io","disambiguator":[18419077991913504482,14568296516906094166]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","num":20,"id":{"name":"log","disambiguator":[9455883310430004040,17376139788716720499]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","num":21,"id":{"name":"cfg_if","disambiguator":[16667018505396256223,5625436889170652735]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","num":22,"id":{"name":"futures","disambiguator":[2197765917231091748,6425706503530463562]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","num":23,"id":{"name":"tokio_tcp","disambiguator":[7069618382111735732,1214975258434416243]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","num":24,"id":{"name":"mio","disambiguator":[11060445931716649847,8088095818311243175]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","num":25,"id":{"name":"net2","disambiguator":[10841188640229378713,9881367623405580630]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","num":26,"id":{"name":"winapi","disambiguator":[18330772677472912647,13646116128097408393]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","num":27,"id":{"name":"slab","disambiguator":[7122473545681774691,10446089107460225263]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","num":28,"id":{"name":"miow","disambiguator":[1881260317897482477,14935764607701944115]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","num":29,"id":{"name":"kernel32","disambiguator":[14465518185931098244,7602155672287129525]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","num":30,"id":{"name":"winapi","disambiguator":[2012734806124297040,13503859066778328165]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","num":31,"id":{"name":"ws2_32","disambiguator":[2785691794057514687,14381420538596784627]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","num":32,"id":{"name":"tokio_reactor","disambiguator":[4554384105550157490,8991506049447928333]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","num":33,"id":{"name":"crossbeam_utils","disambiguator":[12946054221125327669,7957229709682428824]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","num":34,"id":{"name":"lazy_static","disambiguator":[138886175326615119,13093497193639800696]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","num":35,"id":{"name":"num_cpus","disambiguator":[4697755099504093907,6109955017166640330]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","num":36,"id":{"name":"parking_lot","disambiguator":[13968827512218753292,5924185824503716843]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","num":37,"id":{"name":"lock_api","disambiguator":[15963832452694910389,15807232638456996942]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","num":38,"id":{"name":"scopeguard","disambiguator":[10062033390031366168,15792614593473750839]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","num":39,"id":{"name":"parking_lot_core","disambiguator":[15336026059749526774,8517145917536676519]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","num":40,"id":{"name":"smallvec","disambiguator":[14906483462315043932,17300986771106753290]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\client.rs","num":41,"id":{"name":"tokio_executor","disambiguator":[1028986606080240613,15959824433165326835]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","num":42,"id":{"name":"tokio_sync","disambiguator":[7942298419700608485,6890310492248706887]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","num":43,"id":{"name":"fnv","disambiguator":[3305780135751554855,15794450726882671195]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","num":44,"id":{"name":"url","disambiguator":[17912997037793761282,15786947040875753340]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","num":45,"id":{"name":"matches","disambiguator":[16779649703510896418,5260016037989117885]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","num":46,"id":{"name":"idna","disambiguator":[16607614039369311327,244872893331421961]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","num":47,"id":{"name":"unicode_bidi","disambiguator":[5567351090721146243,16216628187856679052]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","num":48,"id":{"name":"unicode_normalization","disambiguator":[4327285366416729762,14131920208066504078]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","num":49,"id":{"name":"percent_encoding","disambiguator":[9023003608231926905,3929243324046294705]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\parser.rs","num":50,"id":{"name":"combine","disambiguator":[712855366979260253,13405456692680363171]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\parser.rs","num":51,"id":{"name":"either","disambiguator":[8243143650171500530,10459371064412273735]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\parser.rs","num":52,"id":{"name":"memchr","disambiguator":[6795532792964061473,15363722549415679297]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\parser.rs","num":53,"id":{"name":"unreachable","disambiguator":[2001769842385882160,392212159930989472]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\parser.rs","num":54,"id":{"name":"void","disambiguator":[11455644614319656222,16393899935407011149]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\parser.rs","num":55,"id":{"name":"ascii","disambiguator":[8387340607648398684,16690329397341388997]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\script.rs","num":56,"id":{"name":"sha1","disambiguator":[406790424603694112,2510850354561249322]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","num":57,"id":{"name":"itoa","disambiguator":[12860247926188119878,16324796807053332150]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","num":58,"id":{"name":"dtoa","disambiguator":[9922770160342653830,10181798195129287097]}}],"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":0,"byte_end":13541,"line_start":1,"line_end":400,"column_start":1,"column_end":11}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":961},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":12569,"byte_end":12575,"line_start":352,"line_end":352,"column_start":24,"column_end":30},"alias_span":null,"name":"Client","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":408},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":12598,"byte_end":12601,"line_start":353,"line_end":353,"column_start":22,"column_end":25},"alias_span":null,"name":"cmd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":409},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":12603,"byte_end":12615,"line_start":353,"line_end":353,"column_start":27,"column_end":39},"alias_span":null,"name":"pack_command","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":411},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":12617,"byte_end":12621,"line_start":353,"line_end":353,"column_start":41,"column_end":45},"alias_span":null,"name":"pipe","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":977},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":12623,"byte_end":12626,"line_start":353,"line_end":353,"column_start":47,"column_end":50},"alias_span":null,"name":"Cmd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":319},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":12628,"byte_end":12632,"line_start":353,"line_end":353,"column_start":52,"column_end":56},"alias_span":null,"name":"Iter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":984},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":12634,"byte_end":12642,"line_start":353,"line_end":353,"column_start":58,"column_end":66},"alias_span":null,"name":"Pipeline","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":989},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":12671,"byte_end":12679,"line_start":354,"line_end":354,"column_start":27,"column_end":35},"alias_span":null,"name":"Commands","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":429},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":12681,"byte_end":12692,"line_start":354,"line_end":354,"column_start":37,"column_end":48},"alias_span":null,"name":"ControlFlow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1459},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":12694,"byte_end":12710,"line_start":354,"line_end":354,"column_start":50,"column_end":66},"alias_span":null,"name":"PipelineCommands","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":436},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":12712,"byte_end":12726,"line_start":354,"line_end":354,"column_start":68,"column_end":82},"alias_span":null,"name":"PubSubCommands","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":484},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":12762,"byte_end":12777,"line_start":356,"line_end":356,"column_start":5,"column_end":20},"alias_span":null,"name":"parse_redis_url","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":567},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":12779,"byte_end":12790,"line_start":356,"line_end":356,"column_start":22,"column_end":33},"alias_span":null,"name":"transaction","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":505},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":12792,"byte_end":12802,"line_start":356,"line_end":356,"column_start":35,"column_end":45},"alias_span":null,"name":"Connection","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1784},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":12804,"byte_end":12818,"line_start":356,"line_end":356,"column_start":47,"column_end":61},"alias_span":null,"name":"ConnectionAddr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1799},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":12820,"byte_end":12834,"line_start":356,"line_end":356,"column_start":63,"column_end":77},"alias_span":null,"name":"ConnectionInfo","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":524},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":12836,"byte_end":12850,"line_start":356,"line_end":356,"column_start":79,"column_end":93},"alias_span":null,"name":"ConnectionLike","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":487},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":12856,"byte_end":12874,"line_start":357,"line_end":357,"column_start":5,"column_end":23},"alias_span":null,"name":"IntoConnectionInfo","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":512},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":12876,"byte_end":12879,"line_start":357,"line_end":357,"column_start":25,"column_end":28},"alias_span":null,"name":"Msg","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":509},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":12881,"byte_end":12887,"line_start":357,"line_end":357,"column_start":30,"column_end":36},"alias_span":null,"name":"PubSub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":664},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":12916,"byte_end":12933,"line_start":359,"line_end":359,"column_start":25,"column_end":42},"alias_span":null,"name":"parse_redis_value","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":653},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":12935,"byte_end":12958,"line_start":359,"line_end":359,"column_start":44,"column_end":67},"alias_span":null,"name":"parse_redis_value_async","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":656},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":12960,"byte_end":12966,"line_start":359,"line_end":359,"column_start":69,"column_end":75},"alias_span":null,"name":"Parser","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":684},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":12993,"byte_end":12999,"line_start":360,"line_end":360,"column_start":25,"column_end":31},"alias_span":null,"name":"Script","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":697},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":13001,"byte_end":13017,"line_start":360,"line_end":360,"column_start":33,"column_end":49},"alias_span":null,"name":"ScriptInvocation","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":922},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":13074,"byte_end":13090,"line_start":364,"line_end":364,"column_start":5,"column_end":21},"alias_span":null,"name":"from_redis_value","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1891},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":13116,"byte_end":13125,"line_start":367,"line_end":367,"column_start":5,"column_end":14},"alias_span":null,"name":"ErrorKind","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":879},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":13157,"byte_end":13171,"line_start":370,"line_end":370,"column_start":5,"column_end":19},"alias_span":null,"name":"FromRedisValue","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1962},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":13199,"byte_end":13207,"line_start":373,"line_end":373,"column_start":5,"column_end":13},"alias_span":null,"name":"InfoDict","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1875},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":13213,"byte_end":13228,"line_start":374,"line_end":374,"column_start":5,"column_end":20},"alias_span":null,"name":"NumericBehavior","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":761},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":13265,"byte_end":13275,"line_start":377,"line_end":377,"column_start":5,"column_end":15},"alias_span":null,"name":"RedisError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":791},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":13281,"byte_end":13292,"line_start":378,"line_end":378,"column_start":5,"column_end":16},"alias_span":null,"name":"RedisFuture","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":789},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":13298,"byte_end":13309,"line_start":379,"line_end":379,"column_start":5,"column_end":16},"alias_span":null,"name":"RedisResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":801},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":13315,"byte_end":13325,"line_start":380,"line_end":380,"column_start":5,"column_end":15},"alias_span":null,"name":"RedisWrite","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":805},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":13331,"byte_end":13342,"line_start":381,"line_end":381,"column_start":5,"column_end":16},"alias_span":null,"name":"ToRedisArgs","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1919},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":13373,"byte_end":13378,"line_start":384,"line_end":384,"column_start":5,"column_end":10},"alias_span":null,"name":"Value","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":0,"byte_end":13541,"line_start":1,"line_end":400,"column_start":1,"column_end":11},"name":"","qualname":"::","value":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":20},{"krate":0,"index":25},{"krate":0,"index":35},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":54},{"krate":0,"index":57},{"krate":0,"index":213},{"krate":0,"index":276},{"krate":0,"index":307},{"krate":0,"index":412},{"krate":0,"index":458},{"krate":0,"index":572},{"krate":0,"index":665},{"krate":0,"index":738}],"decl_id":null,"docs":" redis-rs is a rust implementation of a Redis client library.  It exposes\n a general purpose interface to Redis and also provides specific helpers for\n commonly used functionality.","sig":null,"attributes":[{"value":"deny(non_camel_case_types)","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":12477,"byte_end":12507,"line_start":348,"line_end":348,"column_start":1,"column_end":31}},{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":12508,"byte_end":12530,"line_start":349,"line_end":349,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":57},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"aio","qualname":"::aio","value":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","parent":null,"children":[{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":87},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":96},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":104},{"krate":0,"index":108},{"krate":0,"index":114},{"krate":0,"index":117},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":126},{"krate":0,"index":133},{"krate":0,"index":137},{"krate":0,"index":144},{"krate":0,"index":147},{"krate":0,"index":153},{"krate":0,"index":160},{"krate":0,"index":164},{"krate":0,"index":167},{"krate":0,"index":171},{"krate":0,"index":175},{"krate":0,"index":183},{"krate":0,"index":930},{"krate":0,"index":934},{"krate":0,"index":936},{"krate":0,"index":939},{"krate":0,"index":198},{"krate":0,"index":203}],"decl_id":null,"docs":" Adds experimental async IO support to redis.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":117},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","byte_start":15368,"byte_end":15378,"line_start":63,"line_end":63,"column_start":12,"column_end":22},"name":"Connection","qualname":"::aio::Connection","value":"Connection {  }","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119}],"decl_id":null,"docs":" Represents a stateful redis TCP connection.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","byte_start":16806,"byte_end":16819,"line_start":110,"line_end":110,"column_start":12,"column_end":25},"name":"read_response","qualname":"<Connection>::read_response","value":"fn (self) -> impl Future<Item = (Self, Value), Error = RedisError>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a single response from the connection.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":126},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","byte_start":17335,"byte_end":17342,"line_start":125,"line_end":125,"column_start":8,"column_end":15},"name":"connect","qualname":"::aio::connect","value":"fn (connection_info: ConnectionInfo) -> impl Future<Item = Connection, Error = RedisError>","parent":null,"children":[],"decl_id":null,"docs":" Opens a connection.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":133},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","byte_start":20290,"byte_end":20304,"line_start":206,"line_end":206,"column_start":11,"column_end":25},"name":"ConnectionLike","qualname":"::aio::ConnectionLike","value":"ConnectionLike: Sized","parent":null,"children":[{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136}],"decl_id":null,"docs":" An async abstraction over connections.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","byte_start":20438,"byte_end":20456,"line_start":209,"line_end":209,"column_start":8,"column_end":26},"name":"req_packed_command","qualname":"::aio::ConnectionLike::req_packed_command","value":"fn (self, cmd: Vec<u8>) -> RedisFuture<(Self, Value)>","parent":{"krate":0,"index":133},"children":[],"decl_id":null,"docs":" Sends an already encoded (packed) command into the TCP socket and\n reads the single response from it.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","byte_start":20684,"byte_end":20703,"line_start":214,"line_end":214,"column_start":8,"column_end":27},"name":"req_packed_commands","qualname":"::aio::ConnectionLike::req_packed_commands","value":"fn (self, cmd: Vec<u8>, offset: usize, count: usize) -> RedisFuture<(Self, Vec<Value>)>","parent":{"krate":0,"index":133},"children":[],"decl_id":null,"docs":" Sends multiple already encoded (packed) command into the TCP socket\n and reads `count` responses from it.  This is used to implement\n pipelining.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","byte_start":21081,"byte_end":21087,"line_start":225,"line_end":225,"column_start":8,"column_end":14},"name":"get_db","qualname":"::aio::ConnectionLike::get_db","value":"fn (&self) -> i64","parent":{"krate":0,"index":133},"children":[],"decl_id":null,"docs":" Returns the database this connection is bound to.  Note that this\n information might be unreliable because it's initially cached and\n also might be incorrect if the connection like object is not\n actually connected.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":936},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","byte_start":29706,"byte_end":29722,"line_start":498,"line_end":498,"column_start":12,"column_end":28},"name":"SharedConnection","qualname":"::aio::SharedConnection","value":"SharedConnection {  }","parent":null,"children":[{"krate":0,"index":937},{"krate":0,"index":938}],"decl_id":null,"docs":" A connection object bound to an executor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","byte_start":29874,"byte_end":29877,"line_start":505,"line_end":505,"column_start":12,"column_end":15},"name":"new","qualname":"<SharedConnection>::new","value":"fn <E> (con: Connection, executor: E) -> impl Future<Item = Self, Error = RedisError>","parent":null,"children":[],"decl_id":null,"docs":" Creates a shared connection from a connection and executor.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":213},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"geo","qualname":"::geo","value":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","parent":null,"children":[{"krate":0,"index":214},{"krate":0,"index":217},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":232},{"krate":0,"index":941},{"krate":0,"index":949},{"krate":0,"index":945},{"krate":0,"index":235},{"krate":0,"index":238},{"krate":0,"index":241},{"krate":0,"index":246},{"krate":0,"index":253},{"krate":0,"index":952},{"krate":0,"index":959},{"krate":0,"index":255},{"krate":0,"index":264},{"krate":0,"index":268},{"krate":0,"index":272},{"krate":0,"index":274}],"decl_id":null,"docs":" Defines types to use with the geospatial commands.\n","sig":null,"attributes":[{"value":"cfg(feature = \"geospatial\")","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":13411,"byte_end":13441,"line_start":391,"line_end":391,"column_start":1,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":224},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":33163,"byte_end":33169,"line_start":22,"line_end":22,"column_start":5,"column_end":11},"name":"Meters","qualname":"::geo::Unit::Meters","value":"Unit::Meters","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" Represents meters.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":226},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":33206,"byte_end":33216,"line_start":24,"line_end":24,"column_start":5,"column_end":15},"name":"Kilometers","qualname":"::geo::Unit::Kilometers","value":"Unit::Kilometers","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" Represents kilometers.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":228},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":33248,"byte_end":33253,"line_start":26,"line_end":26,"column_start":5,"column_end":10},"name":"Miles","qualname":"::geo::Unit::Miles","value":"Unit::Miles","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" Represents miles.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":230},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":33284,"byte_end":33288,"line_start":28,"line_end":28,"column_start":5,"column_end":9},"name":"Feet","qualname":"::geo::Unit::Feet","value":"Unit::Feet","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" Represents feed.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":223},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":33125,"byte_end":33129,"line_start":20,"line_end":20,"column_start":10,"column_end":14},"name":"Unit","qualname":"::geo::Unit","value":"Unit::{Meters, Kilometers, Miles, Feet}","parent":null,"children":[{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":230}],"decl_id":null,"docs":" Units used by [`geo_dist`][1] and [`geo_radius`][2].","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":941},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":34039,"byte_end":34044,"line_start":56,"line_end":56,"column_start":12,"column_end":17},"name":"Coord","qualname":"::geo::Coord","value":"Coord { longitude, latitude }","parent":null,"children":[{"krate":0,"index":943},{"krate":0,"index":944}],"decl_id":null,"docs":" A coordinate (longitude, latitude). Can be used with [`geo_pos`][1]\n to parse response from Redis.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":943},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":34076,"byte_end":34085,"line_start":58,"line_end":58,"column_start":9,"column_end":18},"name":"longitude","qualname":"::geo::Coord::longitude","value":"T","parent":{"krate":0,"index":941},"children":[],"decl_id":null,"docs":" Longitude\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":944},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":34115,"byte_end":34123,"line_start":60,"line_end":60,"column_start":9,"column_end":17},"name":"latitude","qualname":"::geo::Coord::latitude","value":"T","parent":{"krate":0,"index":941},"children":[],"decl_id":null,"docs":" Latitude\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":34219,"byte_end":34226,"line_start":65,"line_end":65,"column_start":12,"column_end":19},"name":"lon_lat","qualname":"<Coord<T>>::lon_lat","value":"fn (longitude: T, latitude: T) -> Coord<T>","parent":null,"children":[],"decl_id":null,"docs":" Create a new Coord with the (longitude, latitude)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":247},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":35480,"byte_end":35488,"line_start":108,"line_end":108,"column_start":5,"column_end":13},"name":"Unsorted","qualname":"::geo::RadiusOrder::Unsorted","value":"RadiusOrder::Unsorted","parent":{"krate":0,"index":246},"children":[],"decl_id":null,"docs":" Don't sort the results\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":249},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":35581,"byte_end":35584,"line_start":111,"line_end":111,"column_start":5,"column_end":8},"name":"Asc","qualname":"::geo::RadiusOrder::Asc","value":"RadiusOrder::Asc","parent":{"krate":0,"index":246},"children":[],"decl_id":null,"docs":" Sort returned items from the nearest to the farthest, relative to the center.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":251},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":35677,"byte_end":35681,"line_start":114,"line_end":114,"column_start":5,"column_end":9},"name":"Desc","qualname":"::geo::RadiusOrder::Desc","value":"RadiusOrder::Desc","parent":{"krate":0,"index":246},"children":[],"decl_id":null,"docs":" Sort returned items from the farthest to the nearest, relative to the center.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":246},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":35431,"byte_end":35442,"line_start":106,"line_end":106,"column_start":10,"column_end":21},"name":"RadiusOrder","qualname":"::geo::RadiusOrder","value":"RadiusOrder::{Unsorted, Asc, Desc}","parent":null,"children":[{"krate":0,"index":247},{"krate":0,"index":249},{"krate":0,"index":251}],"decl_id":null,"docs":" Options to sort results from [GEORADIUS][1] and [GEORADIUSBYMEMBER][2] commands","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":952},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":36569,"byte_end":36582,"line_start":148,"line_end":148,"column_start":12,"column_end":25},"name":"RadiusOptions","qualname":"::geo::RadiusOptions","value":"RadiusOptions {  }","parent":null,"children":[{"krate":0,"index":953},{"krate":0,"index":954},{"krate":0,"index":955},{"krate":0,"index":956},{"krate":0,"index":957},{"krate":0,"index":958}],"decl_id":null,"docs":" Options for the [GEORADIUS][1] and [GEORADIUSBYMEMBER][2] commands","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":36841,"byte_end":36846,"line_start":159,"line_end":159,"column_start":12,"column_end":17},"name":"limit","qualname":"<RadiusOptions>::limit","value":"fn (mut self, n: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Limit the results to the first N matching items.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":37134,"byte_end":37143,"line_start":167,"line_end":167,"column_start":12,"column_end":21},"name":"with_dist","qualname":"<RadiusOptions>::with_dist","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return the distance of the returned items from the specified center.\n The distance is returned in the same unit as the unit specified as the\n radius argument of the command.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":37302,"byte_end":37312,"line_start":173,"line_end":173,"column_start":12,"column_end":22},"name":"with_coord","qualname":"<RadiusOptions>::with_coord","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return the `longitude, latitude` coordinates of the matching items.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":37428,"byte_end":37433,"line_start":179,"line_end":179,"column_start":12,"column_end":17},"name":"order","qualname":"<RadiusOptions>::order","value":"fn (mut self, o: RadiusOrder) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sort the returned items\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":37673,"byte_end":37678,"line_start":187,"line_end":187,"column_start":12,"column_end":17},"name":"store","qualname":"<RadiusOptions>::store","value":"fn <K> (mut self, key: K) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Store the results in a sorted set at `key`, instead of returning them.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":37976,"byte_end":37986,"line_start":194,"line_end":194,"column_start":12,"column_end":22},"name":"store_dist","qualname":"<RadiusOptions>::store_dist","value":"fn <K> (mut self, key: K) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Store the results in a sorted set at `key`, with the distance from the\n center as its score. This feature can't be used with any `with_*` method.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":268},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":39361,"byte_end":39379,"line_start":248,"line_end":248,"column_start":12,"column_end":30},"name":"RadiusSearchResult","qualname":"::geo::RadiusSearchResult","value":"RadiusSearchResult { name, coord, dist }","parent":null,"children":[{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271}],"decl_id":null,"docs":" Contain an item returned by [`geo_radius`][1] and [`geo_radius_by_member`][2].","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":269},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":39423,"byte_end":39427,"line_start":250,"line_end":250,"column_start":9,"column_end":13},"name":"name","qualname":"::geo::RadiusSearchResult::name","value":"std::string::String","parent":{"krate":0,"index":268},"children":[],"decl_id":null,"docs":" The name that was found.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":270},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":39482,"byte_end":39487,"line_start":252,"line_end":252,"column_start":9,"column_end":14},"name":"coord","qualname":"::geo::RadiusSearchResult::coord","value":"std::option::Option<geo::Coord<f64>>","parent":{"krate":0,"index":268},"children":[],"decl_id":null,"docs":" The coordinate if available.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":271},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":39552,"byte_end":39556,"line_start":254,"line_end":254,"column_start":9,"column_end":13},"name":"dist","qualname":"::geo::RadiusSearchResult::dist","value":"std::option::Option<f64>","parent":{"krate":0,"index":268},"children":[],"decl_id":null,"docs":" The distance if available.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":961},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\client.rs","byte_start":43031,"byte_end":43037,"line_start":8,"line_end":8,"column_start":12,"column_end":18},"name":"Client","qualname":"::client::Client","value":"Client {  }","parent":null,"children":[{"krate":0,"index":962}],"decl_id":null,"docs":" The client type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\client.rs","byte_start":43840,"byte_end":43844,"line_start":32,"line_end":32,"column_start":12,"column_end":16},"name":"open","qualname":"<Client>::open","value":"fn <T> (params: T) -> RedisResult<Client>","parent":null,"children":[],"decl_id":null,"docs":" Connects to a redis server and returns a client.  This does not\n actually open a connection yet but it does perform some basic\n checks on the URL that might make the operation fail.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\client.rs","byte_start":44316,"byte_end":44330,"line_start":43,"line_end":43,"column_start":12,"column_end":26},"name":"get_connection","qualname":"<Client>::get_connection","value":"fn (&self) -> RedisResult<Connection>","parent":null,"children":[],"decl_id":null,"docs":" Instructs the client to actually connect to redis and returns a\n connection object.  The connection object can be used to send\n commands to the server.  This can fail with a variety of errors\n (like unreachable host) so it's important that you handle those\n errors.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\client.rs","byte_start":44482,"byte_end":44502,"line_start":48,"line_end":48,"column_start":12,"column_end":32},"name":"get_async_connection","qualname":"<Client>::get_async_connection","value":"fn (&self) -> impl Future<Item = crate::aio::Connection, Error = RedisError>","parent":null,"children":[],"decl_id":null,"docs":" Returns an async connection from the client.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\client.rs","byte_start":44815,"byte_end":44842,"line_start":58,"line_end":58,"column_start":12,"column_end":39},"name":"get_shared_async_connection","qualname":"<Client>::get_shared_async_connection","value":"fn (&self) -> impl Future<Item = crate::aio::SharedConnection, Error = RedisError>","parent":null,"children":[],"decl_id":null,"docs":" Returns a async shared connection from the client.","sig":null,"attributes":[{"value":"cfg(feature = \"executor\")","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\client.rs","byte_start":44775,"byte_end":44803,"line_start":57,"line_end":57,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\client.rs","byte_start":45211,"byte_end":45252,"line_start":67,"line_end":67,"column_start":12,"column_end":53},"name":"get_shared_async_connection_with_executor","qualname":"<Client>::get_shared_async_connection_with_executor","value":"fn <E> (&self, executor: E) -> impl Future<Item = crate::aio::SharedConnection, Error = RedisError>","parent":null,"children":[],"decl_id":null,"docs":" Returns a async shared connection with a specific executor.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":977},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":46376,"byte_end":46379,"line_start":17,"line_end":17,"column_start":12,"column_end":15},"name":"Cmd","qualname":"::cmd::Cmd","value":"Cmd {  }","parent":null,"children":[{"krate":0,"index":978},{"krate":0,"index":979},{"krate":0,"index":980},{"krate":0,"index":981}],"decl_id":null,"docs":" Represents redis commands.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":984},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":46621,"byte_end":46629,"line_start":27,"line_end":27,"column_start":12,"column_end":20},"name":"Pipeline","qualname":"::cmd::Pipeline","value":"Pipeline {  }","parent":null,"children":[{"krate":0,"index":985},{"krate":0,"index":986}],"decl_id":null,"docs":" Represents a redis command pipeline.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":319},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":46731,"byte_end":46735,"line_start":33,"line_end":33,"column_start":12,"column_end":16},"name":"Iter","qualname":"::cmd::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325}],"decl_id":null,"docs":" Represents a redis iterator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":353},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":52092,"byte_end":52095,"line_start":232,"line_end":232,"column_start":12,"column_end":15},"name":"new","qualname":"<Cmd>::new","value":"fn () -> Cmd","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty command.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":52873,"byte_end":52876,"line_start":255,"line_end":255,"column_start":12,"column_end":15},"name":"arg","qualname":"<Cmd>::arg","value":"fn <T> (&mut self, arg: T) -> &mut Cmd","parent":null,"children":[],"decl_id":null,"docs":" Appends an argument to the command.  The argument passed must\n be a type that implements `ToRedisArgs`.  Most primitive types as\n well as vectors of primitive types implement it.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":52852,"byte_end":52861,"line_start":254,"line_end":254,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":356},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":53710,"byte_end":53720,"line_start":276,"line_end":276,"column_start":12,"column_end":22},"name":"cursor_arg","qualname":"<Cmd>::cursor_arg","value":"fn (&mut self, cursor: u64) -> &mut Cmd","parent":null,"children":[],"decl_id":null,"docs":" Works similar to `arg` but adds a cursor argument.  This is always\n an integer and also flips the command implementation to support a\n different mode for the iterators where the iterator will ask for\n another batch of items when the local data is exhausted.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":53689,"byte_end":53698,"line_start":275,"line_end":275,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":357},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":53969,"byte_end":53987,"line_start":285,"line_end":285,"column_start":12,"column_end":30},"name":"get_packed_command","qualname":"<Cmd>::get_packed_command","value":"fn (&self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Returns the packed command as a byte vector.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":53948,"byte_end":53957,"line_start":284,"line_end":284,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":54871,"byte_end":54883,"line_start":313,"line_end":313,"column_start":12,"column_end":24},"name":"in_scan_mode","qualname":"<Cmd>::in_scan_mode","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the command is in scan mode.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":54850,"byte_end":54859,"line_start":312,"line_end":312,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":55135,"byte_end":55140,"line_start":321,"line_end":321,"column_start":12,"column_end":17},"name":"query","qualname":"<Cmd>::query","value":"fn <T> (&self, con: &mut dyn ConnectionLike) -> RedisResult<T>","parent":null,"children":[],"decl_id":null,"docs":" Sends the command as query to the connection and converts the\n result to the target redis value.  This is the general way how\n you can retrieve data.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":55114,"byte_end":55123,"line_start":320,"line_end":320,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":364},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":55462,"byte_end":55473,"line_start":331,"line_end":331,"column_start":12,"column_end":23},"name":"query_async","qualname":"<Cmd>::query_async","value":"fn <C, T> (&self, con: C) -> RedisFuture<(C, T)>","parent":null,"children":[],"decl_id":null,"docs":" Async version of `query`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":55441,"byte_end":55450,"line_start":330,"line_end":330,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":369},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":56718,"byte_end":56722,"line_start":358,"line_end":358,"column_start":12,"column_end":16},"name":"iter","qualname":"<Cmd>::iter","value":"fn <'a, T> (self, con: &'a mut dyn ConnectionLike) -> RedisResult<Iter<'a, T>>","parent":null,"children":[],"decl_id":null,"docs":" Similar to `query()` but returns an iterator over the items of the\n bulk result or iterator.  In normal mode this is not in any way more\n efficient than just querying into a `Vec<T>` as it's internally\n implemented as buffering into a vector.  This however is useful when\n `cursor_arg` was used in which case the iterator will query for more\n items until the server side cursor is exhausted.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":56697,"byte_end":56706,"line_start":357,"line_end":357,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":57823,"byte_end":57830,"line_start":393,"line_end":393,"column_start":12,"column_end":19},"name":"execute","qualname":"<Cmd>::execute","value":"fn (&self, con: &mut dyn ConnectionLike) -> ()","parent":null,"children":[],"decl_id":null,"docs":" This is a shortcut to `query()` that does not return a value and\n will fail the task if the query fails because of an error.  This is\n mainly useful in examples and for simple commands like setting\n keys.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":57802,"byte_end":57811,"line_start":392,"line_end":392,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":379},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":59515,"byte_end":59518,"line_start":441,"line_end":441,"column_start":12,"column_end":15},"name":"new","qualname":"<Pipeline>::new","value":"fn () -> Pipeline","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty pipeline.  For consistency with the `cmd`\n api a `pipe` function is provided as alias.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":59647,"byte_end":59660,"line_start":446,"line_end":446,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<Pipeline>::with_capacity","value":"fn (capacity: usize) -> Pipeline","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty pipeline with pre-allocated capacity.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":59966,"byte_end":59969,"line_start":456,"line_end":456,"column_start":12,"column_end":15},"name":"cmd","qualname":"<Pipeline>::cmd","value":"fn (&mut self, name: &str) -> &mut Pipeline","parent":null,"children":[],"decl_id":null,"docs":" Starts a new command.  Functions such as `arg` then become\n available to add more arguments to that command.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":59945,"byte_end":59954,"line_start":455,"line_end":455,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":60136,"byte_end":60147,"line_start":463,"line_end":463,"column_start":12,"column_end":23},"name":"add_command","qualname":"<Pipeline>::add_command","value":"fn (&mut self, cmd: Cmd) -> &mut Pipeline","parent":null,"children":[],"decl_id":null,"docs":" Adds a command to the pipeline.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":60115,"byte_end":60124,"line_start":462,"line_end":462,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":60709,"byte_end":60712,"line_start":482,"line_end":482,"column_start":12,"column_end":15},"name":"arg","qualname":"<Pipeline>::arg","value":"fn <T> (&mut self, arg: T) -> &mut Pipeline","parent":null,"children":[],"decl_id":null,"docs":" Adds an argument to the last started command.  This works similar\n to the `arg` method of the `Cmd` object.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":60688,"byte_end":60697,"line_start":481,"line_end":481,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":61326,"byte_end":61332,"line_start":498,"line_end":498,"column_start":12,"column_end":18},"name":"ignore","qualname":"<Pipeline>::ignore","value":"fn (&mut self) -> &mut Pipeline","parent":null,"children":[],"decl_id":null,"docs":" Instructs the pipeline to ignore the return value of this command.\n It will still be ensured that it is not an error, but any successful\n result is just thrown away.  This makes result processing through\n tuples much easier because you do not need to handle all the items\n you do not care about.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":61305,"byte_end":61314,"line_start":497,"line_end":497,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":62120,"byte_end":62126,"line_start":520,"line_end":520,"column_start":12,"column_end":18},"name":"atomic","qualname":"<Pipeline>::atomic","value":"fn (&mut self) -> &mut Pipeline","parent":null,"children":[],"decl_id":null,"docs":" This enables atomic mode.  In atomic mode the whole pipeline is\n enclosed in `MULTI`/`EXEC`.  From the user's point of view nothing\n changes however.  This is easier than using `MULTI`/`EXEC` yourself\n as the format does not change.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":62099,"byte_end":62108,"line_start":519,"line_end":519,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":62563,"byte_end":62582,"line_start":536,"line_end":536,"column_start":12,"column_end":31},"name":"get_packed_pipeline","qualname":"<Pipeline>::get_packed_pipeline","value":"fn (&self, atomic: bool) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Returns the encoded pipeline commands.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":64446,"byte_end":64451,"line_start":582,"line_end":582,"column_start":12,"column_end":17},"name":"query","qualname":"<Pipeline>::query","value":"fn <T> (&self, con: &mut dyn ConnectionLike) -> RedisResult<T>","parent":null,"children":[],"decl_id":null,"docs":" Executes the pipeline and fetches the return values.  Since most\n pipelines return different types it's recommended to use tuple\n matching to process the results:","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":64425,"byte_end":64434,"line_start":581,"line_end":581,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":65054,"byte_end":65059,"line_start":599,"line_end":599,"column_start":12,"column_end":17},"name":"clear","qualname":"<Pipeline>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear a Pipeline object internal data structure.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":65033,"byte_end":65042,"line_start":598,"line_end":598,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":66336,"byte_end":66347,"line_start":640,"line_end":640,"column_start":12,"column_end":23},"name":"query_async","qualname":"<Pipeline>::query_async","value":"fn <C, T> (self, con: C) -> RedisFuture<(C, T)>","parent":null,"children":[],"decl_id":null,"docs":" Async version of `query`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":66315,"byte_end":66324,"line_start":639,"line_end":639,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":67737,"byte_end":67744,"line_start":674,"line_end":674,"column_start":12,"column_end":19},"name":"execute","qualname":"<Pipeline>::execute","value":"fn (&self, con: &mut dyn ConnectionLike) -> ()","parent":null,"children":[],"decl_id":null,"docs":" This is a shortcut to `query()` that does not return a value and\n will fail the task if the query of the pipeline fails.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":67716,"byte_end":67725,"line_start":673,"line_end":673,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":408},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":68126,"byte_end":68129,"line_start":688,"line_end":688,"column_start":8,"column_end":11},"name":"cmd","qualname":"::cmd::cmd","value":"fn (name: &str) -> Cmd","parent":null,"children":[],"decl_id":null,"docs":" Shortcut function to creating a command with a single argument.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":409},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":68847,"byte_end":68859,"line_start":710,"line_end":710,"column_start":8,"column_end":20},"name":"pack_command","qualname":"::cmd::pack_command","value":"fn (args: &[Vec<u8>]) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Packs a bunch of commands into a request.  This is generally a quite\n useless function as this functionality is nicely wrapped through the\n `Cmd` object, but in some cases it can be useful.  The return value\n of this can then be send to the low level `ConnectionLike` methods.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":411},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":69007,"byte_end":69011,"line_start":715,"line_end":715,"column_start":8,"column_end":12},"name":"pipe","qualname":"::cmd::pipe","value":"fn () -> Pipeline","parent":null,"children":[],"decl_id":null,"docs":" Shortcut for creating a new pipeline.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":990},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74821,"byte_end":74824,"line_start":146,"line_end":146,"column_start":8,"column_end":11},"name":"get","qualname":"::commands::Commands::get","value":"fn <K, RV> (&mut self, key: K) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Get the value of a key.  If key is a vec this becomes an `MGET`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":993},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74975,"byte_end":74979,"line_start":151,"line_end":151,"column_start":8,"column_end":12},"name":"keys","qualname":"::commands::Commands::keys","value":"fn <K, RV> (&mut self, key: K) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Gets all keys matching pattern\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":996},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":75088,"byte_end":75091,"line_start":156,"line_end":156,"column_start":8,"column_end":11},"name":"set","qualname":"::commands::Commands::set","value":"fn <K, V, RV> (&mut self, key: K, value: V) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Set the string value of a key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1000},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":75241,"byte_end":75253,"line_start":161,"line_end":161,"column_start":8,"column_end":20},"name":"set_multiple","qualname":"::commands::Commands::set_multiple","value":"fn <K, V, RV> (&mut self, items: &[(K, V)]) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Sets multiple keys to their values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1004},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":75398,"byte_end":75404,"line_start":166,"line_end":166,"column_start":8,"column_end":14},"name":"set_ex","qualname":"::commands::Commands::set_ex","value":"fn <K, V, RV> (&mut self, key: K, value: V, seconds: usize) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Set the value and expiration of a key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1008},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":75604,"byte_end":75610,"line_start":171,"line_end":171,"column_start":8,"column_end":14},"name":"set_nx","qualname":"::commands::Commands::set_nx","value":"fn <K, V, RV> (&mut self, key: K, value: V) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Set the value of a key, only if the key does not exist\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1012},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":75801,"byte_end":75808,"line_start":176,"line_end":176,"column_start":8,"column_end":15},"name":"mset_nx","qualname":"::commands::Commands::mset_nx","value":"fn <K, V, RV> (&mut self, items: &[(K, V)]) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Sets multiple keys to their values failing if at least one already exists.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1016},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":75972,"byte_end":75978,"line_start":181,"line_end":181,"column_start":8,"column_end":14},"name":"getset","qualname":"::commands::Commands::getset","value":"fn <K, V, RV> (&mut self, key: K, value: V) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Set the string value of a key and return its old value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1020},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":76212,"byte_end":76220,"line_start":186,"line_end":186,"column_start":8,"column_end":16},"name":"getrange","qualname":"::commands::Commands::getrange","value":"fn <K, RV> (&mut self, key: K, from: isize, to: isize) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Get a range of bytes/substring from the value of a key. Negative values provide an offset from the end of the value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1023},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":76415,"byte_end":76423,"line_start":191,"line_end":191,"column_start":8,"column_end":16},"name":"setrange","qualname":"::commands::Commands::setrange","value":"fn <K, V, RV> (&mut self, key: K, offset: isize, value: V) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Overwrite the part of the value stored in key at the specified offset.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1027},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":76594,"byte_end":76597,"line_start":196,"line_end":196,"column_start":8,"column_end":11},"name":"del","qualname":"::commands::Commands::del","value":"fn <K, RV> (&mut self, key: K) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Delete one or more keys.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1030},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":76701,"byte_end":76707,"line_start":201,"line_end":201,"column_start":8,"column_end":14},"name":"exists","qualname":"::commands::Commands::exists","value":"fn <K, RV> (&mut self, key: K) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Determine if a key exists.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1033},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":76824,"byte_end":76830,"line_start":206,"line_end":206,"column_start":8,"column_end":14},"name":"expire","qualname":"::commands::Commands::expire","value":"fn <K, RV> (&mut self, key: K, seconds: usize) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Set a key's time to live in seconds.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1036},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":76989,"byte_end":76998,"line_start":211,"line_end":211,"column_start":8,"column_end":17},"name":"expire_at","qualname":"::commands::Commands::expire_at","value":"fn <K, RV> (&mut self, key: K, ts: usize) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Set the expiration for a key as a UNIX timestamp.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1039},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":77141,"byte_end":77148,"line_start":216,"line_end":216,"column_start":8,"column_end":15},"name":"pexpire","qualname":"::commands::Commands::pexpire","value":"fn <K, RV> (&mut self, key: K, ms: usize) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Set a key's time to live in milliseconds.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1042},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":77314,"byte_end":77324,"line_start":221,"line_end":221,"column_start":8,"column_end":18},"name":"pexpire_at","qualname":"::commands::Commands::pexpire_at","value":"fn <K, RV> (&mut self, key: K, ts: usize) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Set the expiration for a key as a UNIX timestamp in milliseconds.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1045},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":77460,"byte_end":77467,"line_start":226,"line_end":226,"column_start":8,"column_end":15},"name":"persist","qualname":"::commands::Commands::persist","value":"fn <K, RV> (&mut self, key: K) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Remove the expiration from a key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1048},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":77584,"byte_end":77587,"line_start":231,"line_end":231,"column_start":8,"column_end":11},"name":"ttl","qualname":"::commands::Commands::ttl","value":"fn <K, RV> (&mut self, key: K) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Check the expiration time of a key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1051},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":77678,"byte_end":77684,"line_start":236,"line_end":236,"column_start":8,"column_end":14},"name":"rename","qualname":"::commands::Commands::rename","value":"fn <K, RV> (&mut self, key: K, new_key: K) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Rename a key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1054},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":77839,"byte_end":77848,"line_start":241,"line_end":241,"column_start":8,"column_end":17},"name":"rename_nx","qualname":"::commands::Commands::rename_nx","value":"fn <K, RV> (&mut self, key: K, new_key: K) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Rename a key, only if the new key does not exist.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1057},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":78013,"byte_end":78019,"line_start":248,"line_end":248,"column_start":8,"column_end":14},"name":"append","qualname":"::commands::Commands::append","value":"fn <K, V, RV> (&mut self, key: K, value: V) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Append a value to a key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1061},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":78266,"byte_end":78270,"line_start":254,"line_end":254,"column_start":8,"column_end":12},"name":"incr","qualname":"::commands::Commands::incr","value":"fn <K, V, RV> (&mut self, key: K, delta: V) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Increment the numeric value of a key by the given amount.  This\n issues a `INCRBY` or `INCRBYFLOAT` depending on the type.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1065},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":78593,"byte_end":78599,"line_start":263,"line_end":263,"column_start":8,"column_end":14},"name":"setbit","qualname":"::commands::Commands::setbit","value":"fn <K, RV> (&mut self, key: K, offset: usize, value: bool) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Sets or clears the bit at offset in the string value stored at key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1068},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":78813,"byte_end":78819,"line_start":268,"line_end":268,"column_start":8,"column_end":14},"name":"getbit","qualname":"::commands::Commands::getbit","value":"fn <K, RV> (&mut self, key: K, offset: usize) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Returns the bit value at offset in the string value stored at key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1071},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":78954,"byte_end":78962,"line_start":273,"line_end":273,"column_start":8,"column_end":16},"name":"bitcount","qualname":"::commands::Commands::bitcount","value":"fn <K, RV> (&mut self, key: K) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Count set bits in a string.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1074},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":79083,"byte_end":79097,"line_start":278,"line_end":278,"column_start":8,"column_end":22},"name":"bitcount_range","qualname":"::commands::Commands::bitcount_range","value":"fn <K, RV> (&mut self, key: K, start: usize, end: usize) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Count set bits in a string in a range.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1077},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":79349,"byte_end":79356,"line_start":284,"line_end":284,"column_start":8,"column_end":15},"name":"bit_and","qualname":"::commands::Commands::bit_and","value":"fn <K, RV> (&mut self, dstkey: K, srckeys: K) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Perform a bitwise AND between multiple keys (containing string values)\n and store the result in the destination key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1080},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":79600,"byte_end":79606,"line_start":290,"line_end":290,"column_start":8,"column_end":14},"name":"bit_or","qualname":"::commands::Commands::bit_or","value":"fn <K, RV> (&mut self, dstkey: K, srckeys: K) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Perform a bitwise OR between multiple keys (containing string values)\n and store the result in the destination key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1083},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":79850,"byte_end":79857,"line_start":296,"line_end":296,"column_start":8,"column_end":15},"name":"bit_xor","qualname":"::commands::Commands::bit_xor","value":"fn <K, RV> (&mut self, dstkey: K, srckeys: K) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Perform a bitwise XOR between multiple keys (containing string values)\n and store the result in the destination key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1086},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":80091,"byte_end":80098,"line_start":302,"line_end":302,"column_start":8,"column_end":15},"name":"bit_not","qualname":"::commands::Commands::bit_not","value":"fn <K, RV> (&mut self, dstkey: K, srckey: K) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Perform a bitwise NOT of the key (containing string values)\n and store the result in the destination key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1089},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":80262,"byte_end":80268,"line_start":307,"line_end":307,"column_start":8,"column_end":14},"name":"strlen","qualname":"::commands::Commands::strlen","value":"fn <K, RV> (&mut self, key: K) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Get the length of the value stored in a key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1092},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":80420,"byte_end":80424,"line_start":314,"line_end":314,"column_start":8,"column_end":12},"name":"hget","qualname":"::commands::Commands::hget","value":"fn <K, F, RV> (&mut self, key: K, field: F) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Gets a single (or multiple) fields from a hash.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1096},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":80636,"byte_end":80640,"line_start":319,"line_end":319,"column_start":8,"column_end":12},"name":"hdel","qualname":"::commands::Commands::hdel","value":"fn <K, F, RV> (&mut self, key: K, field: F) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Deletes a single (or multiple) fields from a hash.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1100},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":80786,"byte_end":80790,"line_start":324,"line_end":324,"column_start":8,"column_end":12},"name":"hset","qualname":"::commands::Commands::hset","value":"fn <K, F, V, RV> (&mut self, key: K, field: F, value: V) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Sets a single field in a hash.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1105},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":80994,"byte_end":81001,"line_start":329,"line_end":329,"column_start":8,"column_end":15},"name":"hset_nx","qualname":"::commands::Commands::hset_nx","value":"fn <K, F, V, RV> (&mut self, key: K, field: F, value: V) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Sets a single field in a hash if it does not exist.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1110},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":81189,"byte_end":81202,"line_start":334,"line_end":334,"column_start":8,"column_end":21},"name":"hset_multiple","qualname":"::commands::Commands::hset_multiple","value":"fn <K, F, V, RV> (&mut self, key: K, items: &[(F, V)]) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Sets a multiple fields in a hash.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1115},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":81362,"byte_end":81367,"line_start":339,"line_end":339,"column_start":8,"column_end":13},"name":"hincr","qualname":"::commands::Commands::hincr","value":"fn <K, F, D, RV> (&mut self, key: K, field: F, delta: D) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Increments a value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1120},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":81697,"byte_end":81704,"line_start":348,"line_end":348,"column_start":8,"column_end":15},"name":"hexists","qualname":"::commands::Commands::hexists","value":"fn <K, F, RV> (&mut self, key: K, field: F) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Checks if a field in a hash exists.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1124},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":81851,"byte_end":81856,"line_start":353,"line_end":353,"column_start":8,"column_end":13},"name":"hkeys","qualname":"::commands::Commands::hkeys","value":"fn <K, RV> (&mut self, key: K) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Gets all the keys in a hash.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1127},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":81966,"byte_end":81971,"line_start":358,"line_end":358,"column_start":8,"column_end":13},"name":"hvals","qualname":"::commands::Commands::hvals","value":"fn <K, RV> (&mut self, key: K) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Gets all the values in a hash.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1130},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":82092,"byte_end":82099,"line_start":363,"line_end":363,"column_start":8,"column_end":15},"name":"hgetall","qualname":"::commands::Commands::hgetall","value":"fn <K, RV> (&mut self, key: K) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Gets all the fields and values in a hash.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1133},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":82207,"byte_end":82211,"line_start":368,"line_end":368,"column_start":8,"column_end":12},"name":"hlen","qualname":"::commands::Commands::hlen","value":"fn <K, RV> (&mut self, key: K) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Gets the length of a hash.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1136},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":82390,"byte_end":82395,"line_start":375,"line_end":375,"column_start":8,"column_end":13},"name":"blpop","qualname":"::commands::Commands::blpop","value":"fn <K, RV> (&mut self, key: K, timeout: usize) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Remove and get the first element in a list, or block until one is available.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1139},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":82579,"byte_end":82584,"line_start":380,"line_end":380,"column_start":8,"column_end":13},"name":"brpop","qualname":"::commands::Commands::brpop","value":"fn <K, RV> (&mut self, key: K, timeout: usize) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Remove and get the last element in a list, or block until one is available.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1142},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":82797,"byte_end":82807,"line_start":386,"line_end":386,"column_start":8,"column_end":18},"name":"brpoplpush","qualname":"::commands::Commands::brpoplpush","value":"fn <K, RV> (&mut self, srckey: K, dstkey: K, timeout: usize) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Pop a value from a list, push it to another list and return it;\n or block until one is available.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1145},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":82990,"byte_end":82996,"line_start":391,"line_end":391,"column_start":8,"column_end":14},"name":"lindex","qualname":"::commands::Commands::lindex","value":"fn <K, RV> (&mut self, key: K, index: isize) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Get an element from a list by its index.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1148},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":83153,"byte_end":83167,"line_start":396,"line_end":396,"column_start":8,"column_end":22},"name":"linsert_before","qualname":"::commands::Commands::linsert_before","value":"fn <K, P, V, RV> (&mut self, key: K, pivot: P, value: V) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Insert an element before another element in a list.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1153},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":83400,"byte_end":83413,"line_start":402,"line_end":402,"column_start":8,"column_end":21},"name":"linsert_after","qualname":"::commands::Commands::linsert_after","value":"fn <K, P, V, RV> (&mut self, key: K, pivot: P, value: V) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Insert an element after another element in a list.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1158},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":83640,"byte_end":83644,"line_start":408,"line_end":408,"column_start":8,"column_end":12},"name":"llen","qualname":"::commands::Commands::llen","value":"fn <K, RV> (&mut self, key: K) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Returns the length of the list stored at key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1161},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":83787,"byte_end":83791,"line_start":413,"line_end":413,"column_start":8,"column_end":12},"name":"lpop","qualname":"::commands::Commands::lpop","value":"fn <K, RV> (&mut self, key: K) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Removes and returns the first element of the list stored at key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1164},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":83940,"byte_end":83945,"line_start":418,"line_end":418,"column_start":8,"column_end":13},"name":"lpush","qualname":"::commands::Commands::lpush","value":"fn <K, V, RV> (&mut self, key: K, value: V) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Insert all the specified values at the head of the list stored at key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1168},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":84169,"byte_end":84181,"line_start":424,"line_end":424,"column_start":8,"column_end":20},"name":"lpush_exists","qualname":"::commands::Commands::lpush_exists","value":"fn <K, V, RV> (&mut self, key: K, value: V) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Inserts a value at the head of the list stored at key, only if key\n already exists and holds a list.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1172},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":84356,"byte_end":84362,"line_start":429,"line_end":429,"column_start":8,"column_end":14},"name":"lrange","qualname":"::commands::Commands::lrange","value":"fn <K, RV> (&mut self, key: K, start: isize, stop: isize) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Returns the specified elements of the list stored at key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1175},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":84590,"byte_end":84594,"line_start":435,"line_end":435,"column_start":8,"column_end":12},"name":"lrem","qualname":"::commands::Commands::lrem","value":"fn <K, V, RV> (&mut self, key: K, count: isize, value: V) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Removes the first count occurrences of elements equal to value\n from the list stored at key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1179},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":84836,"byte_end":84841,"line_start":441,"line_end":441,"column_start":8,"column_end":13},"name":"ltrim","qualname":"::commands::Commands::ltrim","value":"fn <K, RV> (&mut self, key: K, start: isize, stop: isize) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Trim an existing list so that it will contain only the specified\n range of elements specified.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1182},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":85008,"byte_end":85012,"line_start":446,"line_end":446,"column_start":8,"column_end":12},"name":"lset","qualname":"::commands::Commands::lset","value":"fn <K, V, RV> (&mut self, key: K, index: isize, value: V) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Sets the list element at index to value\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1186},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":85216,"byte_end":85220,"line_start":451,"line_end":451,"column_start":8,"column_end":12},"name":"rpop","qualname":"::commands::Commands::rpop","value":"fn <K, RV> (&mut self, key: K) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Removes and returns the last element of the list stored at key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1189},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":85362,"byte_end":85371,"line_start":456,"line_end":456,"column_start":8,"column_end":17},"name":"rpoplpush","qualname":"::commands::Commands::rpoplpush","value":"fn <K, RV> (&mut self, key: K, dstkey: K) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Pop a value from a list, push it to another list and return it.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1192},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":85548,"byte_end":85553,"line_start":461,"line_end":461,"column_start":8,"column_end":13},"name":"rpush","qualname":"::commands::Commands::rpush","value":"fn <K, V, RV> (&mut self, key: K, value: V) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Insert all the specified values at the tail of the list stored at key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1196},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":85775,"byte_end":85787,"line_start":467,"line_end":467,"column_start":8,"column_end":20},"name":"rpush_exists","qualname":"::commands::Commands::rpush_exists","value":"fn <K, V, RV> (&mut self, key: K, value: V) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Inserts value at the tail of the list stored at key, only if key\n already exists and holds a list.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1200},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":85959,"byte_end":85963,"line_start":474,"line_end":474,"column_start":8,"column_end":12},"name":"sadd","qualname":"::commands::Commands::sadd","value":"fn <K, M, RV> (&mut self, key: K, member: M) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Add one or more members to a set.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1204},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":86116,"byte_end":86121,"line_start":479,"line_end":479,"column_start":8,"column_end":13},"name":"scard","qualname":"::commands::Commands::scard","value":"fn <K, RV> (&mut self, key: K) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Get the number of members in a set.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1207},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":86224,"byte_end":86229,"line_start":484,"line_end":484,"column_start":8,"column_end":13},"name":"sdiff","qualname":"::commands::Commands::sdiff","value":"fn <K, RV> (&mut self, keys: K) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Subtract multiple sets.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1210},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":86371,"byte_end":86381,"line_start":489,"line_end":489,"column_start":8,"column_end":18},"name":"sdiffstore","qualname":"::commands::Commands::sdiffstore","value":"fn <K, RV> (&mut self, dstkey: K, keys: K) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Subtract multiple sets and store the resulting set in a key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1213},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":86515,"byte_end":86521,"line_start":494,"line_end":494,"column_start":8,"column_end":14},"name":"sinter","qualname":"::commands::Commands::sinter","value":"fn <K, RV> (&mut self, keys: K) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Intersect multiple sets.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1216},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":86665,"byte_end":86676,"line_start":499,"line_end":499,"column_start":8,"column_end":19},"name":"sinterstore","qualname":"::commands::Commands::sinterstore","value":"fn <K, RV> (&mut self, dstkey: K, keys: K) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Intersect multiple sets and store the resulting set in a key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1219},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":86835,"byte_end":86844,"line_start":504,"line_end":504,"column_start":8,"column_end":17},"name":"sismember","qualname":"::commands::Commands::sismember","value":"fn <K, M, RV> (&mut self, key: K, member: M) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Determine if a given value is a member of a set.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1223},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":86996,"byte_end":87004,"line_start":509,"line_end":509,"column_start":8,"column_end":16},"name":"smembers","qualname":"::commands::Commands::smembers","value":"fn <K, RV> (&mut self, key: K) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Get all the members in a set.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1226},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":87125,"byte_end":87130,"line_start":514,"line_end":514,"column_start":8,"column_end":13},"name":"smove","qualname":"::commands::Commands::smove","value":"fn <K, M, RV> (&mut self, srckey: K, dstkey: K, member: M) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Move a member from one set to another.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1230},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":87323,"byte_end":87327,"line_start":519,"line_end":519,"column_start":8,"column_end":12},"name":"spop","qualname":"::commands::Commands::spop","value":"fn <K, RV> (&mut self, key: K) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Remove and return a random member from a set.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1233},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":87439,"byte_end":87450,"line_start":524,"line_end":524,"column_start":8,"column_end":19},"name":"srandmember","qualname":"::commands::Commands::srandmember","value":"fn <K, RV> (&mut self, key: K) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Get one random member from a set.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1236},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":87575,"byte_end":87595,"line_start":529,"line_end":529,"column_start":8,"column_end":28},"name":"srandmember_multiple","qualname":"::commands::Commands::srandmember_multiple","value":"fn <K, RV> (&mut self, key: K, count: usize) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Get multiple random members from a set.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1239},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":87744,"byte_end":87748,"line_start":534,"line_end":534,"column_start":8,"column_end":12},"name":"srem","qualname":"::commands::Commands::srem","value":"fn <K, M, RV> (&mut self, key: K, member: M) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Remove one or more members from a set.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1243},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":87884,"byte_end":87890,"line_start":539,"line_end":539,"column_start":8,"column_end":14},"name":"sunion","qualname":"::commands::Commands::sunion","value":"fn <K, RV> (&mut self, keys: K) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Add multiple sets.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1246},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":88028,"byte_end":88039,"line_start":544,"line_end":544,"column_start":8,"column_end":19},"name":"sunionstore","qualname":"::commands::Commands::sunionstore","value":"fn <K, RV> (&mut self, dstkey: K, keys: K) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Add multiple sets and store the resulting set in a key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1249},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":88251,"byte_end":88255,"line_start":551,"line_end":551,"column_start":8,"column_end":12},"name":"zadd","qualname":"::commands::Commands::zadd","value":"fn <K, S, M, RV> (&mut self, key: K, member: M, score: S) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Add one member to a sorted set, or update its score if it already exists.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1254},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":88489,"byte_end":88502,"line_start":556,"line_end":556,"column_start":8,"column_end":21},"name":"zadd_multiple","qualname":"::commands::Commands::zadd_multiple","value":"fn <K, S, M, RV> (&mut self, key: K, items: &[(S, M)]) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Add multiple members to a sorted set, or update its score if it already exists.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1259},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":88684,"byte_end":88689,"line_start":561,"line_end":561,"column_start":8,"column_end":13},"name":"zcard","qualname":"::commands::Commands::zcard","value":"fn <K, RV> (&mut self, key: K) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Get the number of members in a sorted set.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1262},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":88839,"byte_end":88845,"line_start":566,"line_end":566,"column_start":8,"column_end":14},"name":"zcount","qualname":"::commands::Commands::zcount","value":"fn <K, M, MM, RV> (&mut self, key: K, min: M, max: MM) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Count the members in a sorted set with scores within the given values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1267},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":89123,"byte_end":89128,"line_start":572,"line_end":572,"column_start":8,"column_end":13},"name":"zincr","qualname":"::commands::Commands::zincr","value":"fn <K, M, D, RV> (&mut self, key: K, member: M, delta: D) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Increments the member in a sorted set at key by delta.\n If the member does not exist, it is added with delta as its score.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1272},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":89407,"byte_end":89418,"line_start":578,"line_end":578,"column_start":8,"column_end":19},"name":"zinterstore","qualname":"::commands::Commands::zinterstore","value":"fn <K, RV> (&mut self, dstkey: K, keys: &[K]) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Intersect multiple sorted sets and store the resulting sorted set in\n a new key using SUM as aggregation function.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1275},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":89669,"byte_end":89684,"line_start":584,"line_end":584,"column_start":8,"column_end":23},"name":"zinterstore_min","qualname":"::commands::Commands::zinterstore_min","value":"fn <K, RV> (&mut self, dstkey: K, keys: &[K]) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Intersect multiple sorted sets and store the resulting sorted set in\n a new key using MIN as aggregation function.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1278},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":89963,"byte_end":89978,"line_start":590,"line_end":590,"column_start":8,"column_end":23},"name":"zinterstore_max","qualname":"::commands::Commands::zinterstore_max","value":"fn <K, RV> (&mut self, dstkey: K, keys: &[K]) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Intersect multiple sorted sets and store the resulting sorted set in\n a new key using MAX as aggregation function.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1281},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":90218,"byte_end":90227,"line_start":595,"line_end":595,"column_start":8,"column_end":17},"name":"zlexcount","qualname":"::commands::Commands::zlexcount","value":"fn <K, L, RV> (&mut self, key: K, min: L, max: L) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Count the number of members in a sorted set between a given lexicographical range.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1285},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":90412,"byte_end":90418,"line_start":600,"line_end":600,"column_start":8,"column_end":14},"name":"zrange","qualname":"::commands::Commands::zrange","value":"fn <K, RV> (&mut self, key: K, start: isize, stop: isize) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Return a range of members in a sorted set, by index\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1288},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":90611,"byte_end":90628,"line_start":605,"line_end":605,"column_start":8,"column_end":25},"name":"zrange_withscores","qualname":"::commands::Commands::zrange_withscores","value":"fn <K, RV> (&mut self, key: K, start: isize, stop: isize) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Return a range of members in a sorted set, by index with scores.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1291},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":90843,"byte_end":90854,"line_start":610,"line_end":610,"column_start":8,"column_end":19},"name":"zrangebylex","qualname":"::commands::Commands::zrangebylex","value":"fn <K, M, MM, RV> (&mut self, key: K, min: M, max: MM) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Return a range of members in a sorted set, by lexicographical range.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1296},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":91106,"byte_end":91123,"line_start":616,"line_end":616,"column_start":8,"column_end":25},"name":"zrangebylex_limit","qualname":"::commands::Commands::zrangebylex_limit","value":"fn <K, M, MM, RV> (&mut self, key: K, min: M, max: MM, offset: isize, count: isize) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Return a range of members in a sorted set, by lexicographical\n range with offset and limit.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1301},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":91423,"byte_end":91437,"line_start":622,"line_end":622,"column_start":8,"column_end":22},"name":"zrevrangebylex","qualname":"::commands::Commands::zrevrangebylex","value":"fn <K, MM, M, RV> (&mut self, key: K, max: MM, min: M) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Return a range of members in a sorted set, by lexicographical range.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1306},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":91692,"byte_end":91712,"line_start":628,"line_end":628,"column_start":8,"column_end":28},"name":"zrevrangebylex_limit","qualname":"::commands::Commands::zrevrangebylex_limit","value":"fn <K, MM, M, RV> (&mut self, key: K, max: MM, min: M, offset: isize, count: isize) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Return a range of members in a sorted set, by lexicographical\n range with offset and limit.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1311},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":91999,"byte_end":92012,"line_start":634,"line_end":634,"column_start":8,"column_end":21},"name":"zrangebyscore","qualname":"::commands::Commands::zrangebyscore","value":"fn <K, M, MM, RV> (&mut self, key: K, min: M, max: MM) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Return a range of members in a sorted set, by score.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1316},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":92232,"byte_end":92256,"line_start":639,"line_end":639,"column_start":8,"column_end":32},"name":"zrangebyscore_withscores","qualname":"::commands::Commands::zrangebyscore_withscores","value":"fn <K, M, MM, RV> (&mut self, key: K, min: M, max: MM) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Return a range of members in a sorted set, by score with scores.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1321},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":92493,"byte_end":92512,"line_start":644,"line_end":644,"column_start":8,"column_end":27},"name":"zrangebyscore_limit","qualname":"::commands::Commands::zrangebyscore_limit","value":"fn <K, M, MM, RV> (&mut self, key: K, min: M, max: MM, offset: isize, count: isize) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Return a range of members in a sorted set, by score with limit.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1326},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":92821,"byte_end":92851,"line_start":650,"line_end":650,"column_start":8,"column_end":38},"name":"zrangebyscore_limit_withscores","qualname":"::commands::Commands::zrangebyscore_limit_withscores","value":"fn <K, M, MM, RV> (&mut self, key: K, min: M, max: MM, offset: isize, count: isize) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Return a range of members in a sorted set, by score with limit with scores.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1331},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":93164,"byte_end":93169,"line_start":657,"line_end":657,"column_start":8,"column_end":13},"name":"zrank","qualname":"::commands::Commands::zrank","value":"fn <K, M, RV> (&mut self, key: K, member: M) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Determine the index of a member in a sorted set.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1335},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":93333,"byte_end":93337,"line_start":662,"line_end":662,"column_start":8,"column_end":12},"name":"zrem","qualname":"::commands::Commands::zrem","value":"fn <K, M, RV> (&mut self, key: K, members: M) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Remove one or more members from a sorted set.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1339},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":93532,"byte_end":93541,"line_start":667,"line_end":667,"column_start":8,"column_end":17},"name":"zrembylex","qualname":"::commands::Commands::zrembylex","value":"fn <K, M, MM, RV> (&mut self, key: K, min: M, max: MM) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Remove all members in a sorted set between the given lexicographical range.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1344},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":93753,"byte_end":93763,"line_start":672,"line_end":672,"column_start":8,"column_end":18},"name":"zrembyrank","qualname":"::commands::Commands::zrembyrank","value":"fn <K, RV> (&mut self, key: K, start: isize, stop: isize) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Remove all members in a sorted set within the given indexes.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1347},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":93955,"byte_end":93966,"line_start":677,"line_end":677,"column_start":8,"column_end":19},"name":"zrembyscore","qualname":"::commands::Commands::zrembyscore","value":"fn <K, M, MM, RV> (&mut self, key: K, min: M, max: MM) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Remove all members in a sorted set within the given scores.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1352},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":94223,"byte_end":94232,"line_start":683,"line_end":683,"column_start":8,"column_end":17},"name":"zrevrange","qualname":"::commands::Commands::zrevrange","value":"fn <K, RV> (&mut self, key: K, start: isize, stop: isize) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Return a range of members in a sorted set, by index, with scores\n ordered from high to low.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1355},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":94462,"byte_end":94482,"line_start":689,"line_end":689,"column_start":8,"column_end":28},"name":"zrevrange_withscores","qualname":"::commands::Commands::zrevrange_withscores","value":"fn <K, RV> (&mut self, key: K, start: isize, stop: isize) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Return a range of members in a sorted set, by index, with scores\n ordered from high to low.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1358},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":94684,"byte_end":94700,"line_start":694,"line_end":694,"column_start":8,"column_end":24},"name":"zrevrangebyscore","qualname":"::commands::Commands::zrevrangebyscore","value":"fn <K, MM, M, RV> (&mut self, key: K, max: MM, min: M) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Return a range of members in a sorted set, by score.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1363},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":94923,"byte_end":94950,"line_start":699,"line_end":699,"column_start":8,"column_end":35},"name":"zrevrangebyscore_withscores","qualname":"::commands::Commands::zrevrangebyscore_withscores","value":"fn <K, MM, M, RV> (&mut self, key: K, max: MM, min: M) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Return a range of members in a sorted set, by score with scores.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1368},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":95190,"byte_end":95212,"line_start":704,"line_end":704,"column_start":8,"column_end":30},"name":"zrevrangebyscore_limit","qualname":"::commands::Commands::zrevrangebyscore_limit","value":"fn <K, MM, M, RV> (&mut self, key: K, max: MM, min: M, offset: isize, count: isize) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Return a range of members in a sorted set, by score with limit.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1373},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":95524,"byte_end":95557,"line_start":710,"line_end":710,"column_start":8,"column_end":41},"name":"zrevrangebyscore_limit_withscores","qualname":"::commands::Commands::zrevrangebyscore_limit_withscores","value":"fn <K, MM, M, RV> (&mut self, key: K, max: MM, min: M, offset: isize, count: isize) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Return a range of members in a sorted set, by score with limit with scores.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1378},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":95911,"byte_end":95919,"line_start":717,"line_end":717,"column_start":8,"column_end":16},"name":"zrevrank","qualname":"::commands::Commands::zrevrank","value":"fn <K, M, RV> (&mut self, key: K, member: M) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Determine the index of a member in a sorted set, with scores ordered from high to low.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1382},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":96104,"byte_end":96110,"line_start":722,"line_end":722,"column_start":8,"column_end":14},"name":"zscore","qualname":"::commands::Commands::zscore","value":"fn <K, M, RV> (&mut self, key: K, member: M) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Get the score associated with the given member in a sorted set.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1386},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":96348,"byte_end":96359,"line_start":728,"line_end":728,"column_start":8,"column_end":19},"name":"zunionstore","qualname":"::commands::Commands::zunionstore","value":"fn <K, RV> (&mut self, dstkey: K, keys: &[K]) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Unions multiple sorted sets and store the resulting sorted set in\n a new key using SUM as aggregation function.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1389},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":96607,"byte_end":96622,"line_start":734,"line_end":734,"column_start":8,"column_end":23},"name":"zunionstore_min","qualname":"::commands::Commands::zunionstore_min","value":"fn <K, RV> (&mut self, dstkey: K, keys: &[K]) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Unions multiple sorted sets and store the resulting sorted set in\n a new key using MIN as aggregation function.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1392},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":96898,"byte_end":96913,"line_start":740,"line_end":740,"column_start":8,"column_end":23},"name":"zunionstore_max","qualname":"::commands::Commands::zunionstore_max","value":"fn <K, RV> (&mut self, dstkey: K, keys: &[K]) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Unions multiple sorted sets and store the resulting sorted set in\n a new key using MAX as aggregation function.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1395},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":97157,"byte_end":97162,"line_start":747,"line_end":747,"column_start":8,"column_end":13},"name":"pfadd","qualname":"::commands::Commands::pfadd","value":"fn <K, E, RV> (&mut self, key: K, element: E) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Adds the specified elements to the specified HyperLogLog.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1399},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":97379,"byte_end":97386,"line_start":753,"line_end":753,"column_start":8,"column_end":15},"name":"pfcount","qualname":"::commands::Commands::pfcount","value":"fn <K, RV> (&mut self, key: K) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Return the approximated cardinality of the set(s) observed by the\n HyperLogLog at key(s).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1402},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":97517,"byte_end":97524,"line_start":758,"line_end":758,"column_start":8,"column_end":15},"name":"pfmerge","qualname":"::commands::Commands::pfmerge","value":"fn <K, RV> (&mut self, dstkey: K, srckeys: K) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Merge N different HyperLogLogs into a single one.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1405},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":97674,"byte_end":97681,"line_start":763,"line_end":763,"column_start":8,"column_end":15},"name":"publish","qualname":"::commands::Commands::publish","value":"fn <K, E, RV> (&mut self, channel: K, message: E) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Posts a message to the given channel.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1409},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":99115,"byte_end":99122,"line_start":803,"line_end":803,"column_start":8,"column_end":15},"name":"geo_add","qualname":"::commands::Commands::geo_add","value":"fn <K, M, RV> (&mut self, key: K, members: M) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Adds the specified geospatial items to the specified key.","sig":null,"attributes":[{"value":"cfg(feature = \"geospatial\")","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70899,"byte_end":70907,"line_start":48,"line_end":48,"column_start":19,"column_end":27}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1413},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":100218,"byte_end":100226,"line_start":839,"line_end":839,"column_start":8,"column_end":16},"name":"geo_dist","qualname":"::commands::Commands::geo_dist","value":"fn <K, M1, M2, RV> (&mut self, key: K, member1: M1, member2: M2, unit: geo::Unit) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Return the distance between two members in the geospatial index\n represented by the sorted set.","sig":null,"attributes":[{"value":"cfg(feature = \"geospatial\")","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70899,"byte_end":70907,"line_start":48,"line_end":48,"column_start":19,"column_end":27}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1418},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":101226,"byte_end":101234,"line_start":872,"line_end":872,"column_start":8,"column_end":16},"name":"geo_hash","qualname":"::commands::Commands::geo_hash","value":"fn <K, M, RV> (&mut self, key: K, members: M) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Return valid [Geohash][1] strings representing the position of one or\n more members of the geospatial index represented by the sorted set at\n key.","sig":null,"attributes":[{"value":"cfg(feature = \"geospatial\")","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70899,"byte_end":70907,"line_start":48,"line_end":48,"column_start":19,"column_end":27}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1422},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":102268,"byte_end":102275,"line_start":900,"line_end":900,"column_start":8,"column_end":15},"name":"geo_pos","qualname":"::commands::Commands::geo_pos","value":"fn <K, M, RV> (&mut self, key: K, members: M) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Return the positions of all the specified members of the geospatial\n index represented by the sorted set at key.","sig":null,"attributes":[{"value":"cfg(feature = \"geospatial\")","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70899,"byte_end":70907,"line_start":48,"line_end":48,"column_start":19,"column_end":27}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1426},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":103355,"byte_end":103365,"line_start":924,"line_end":924,"column_start":8,"column_end":18},"name":"geo_radius","qualname":"::commands::Commands::geo_radius","value":"fn <K, RV> (&mut self, key: K, longitude: f64, latitude: f64, radius: f64, unit: geo::Unit, options: geo::RadiusOptions) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Return the members of a sorted set populated with geospatial information\n using [`geo_add`](#method.geo_add), which are within the borders of the area\n specified with the center location and the maximum distance from the center\n (the radius).","sig":null,"attributes":[{"value":"cfg(feature = \"geospatial\")","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70899,"byte_end":70907,"line_start":48,"line_end":48,"column_start":19,"column_end":27}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1429},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":103898,"byte_end":103918,"line_start":944,"line_end":944,"column_start":8,"column_end":28},"name":"geo_radius_by_member","qualname":"::commands::Commands::geo_radius_by_member","value":"fn <K, M, RV> (&mut self, key: K, member: M, radius: f64, unit: geo::Unit, options: geo::RadiusOptions) -> RedisResult<RV>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Retrieve members selected by distance with the center of `member`. The\n member itself is always contained in the results.\n","sig":null,"attributes":[{"value":"cfg(feature = \"geospatial\")","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70899,"byte_end":70907,"line_start":48,"line_end":48,"column_start":19,"column_end":27}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":70926,"byte_end":70935,"line_start":49,"line_end":49,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1461},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74821,"byte_end":74824,"line_start":146,"line_end":146,"column_start":8,"column_end":11},"name":"get","qualname":"::commands::PipelineCommands::get","value":"fn <K> (&mut self, key: K) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Get the value of a key.  If key is a vec this becomes an `MGET`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1463},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74975,"byte_end":74979,"line_start":151,"line_end":151,"column_start":8,"column_end":12},"name":"keys","qualname":"::commands::PipelineCommands::keys","value":"fn <K> (&mut self, key: K) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Gets all keys matching pattern\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1465},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":75088,"byte_end":75091,"line_start":156,"line_end":156,"column_start":8,"column_end":11},"name":"set","qualname":"::commands::PipelineCommands::set","value":"fn <K, V> (&mut self, key: K, value: V) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Set the string value of a key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1468},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":75241,"byte_end":75253,"line_start":161,"line_end":161,"column_start":8,"column_end":20},"name":"set_multiple","qualname":"::commands::PipelineCommands::set_multiple","value":"fn <K, V> (&mut self, items: &[(K, V)]) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Sets multiple keys to their values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1471},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":75398,"byte_end":75404,"line_start":166,"line_end":166,"column_start":8,"column_end":14},"name":"set_ex","qualname":"::commands::PipelineCommands::set_ex","value":"fn <K, V> (&mut self, key: K, value: V, seconds: usize) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Set the value and expiration of a key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1474},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":75604,"byte_end":75610,"line_start":171,"line_end":171,"column_start":8,"column_end":14},"name":"set_nx","qualname":"::commands::PipelineCommands::set_nx","value":"fn <K, V> (&mut self, key: K, value: V) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Set the value of a key, only if the key does not exist\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1477},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":75801,"byte_end":75808,"line_start":176,"line_end":176,"column_start":8,"column_end":15},"name":"mset_nx","qualname":"::commands::PipelineCommands::mset_nx","value":"fn <K, V> (&mut self, items: &[(K, V)]) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Sets multiple keys to their values failing if at least one already exists.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1480},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":75972,"byte_end":75978,"line_start":181,"line_end":181,"column_start":8,"column_end":14},"name":"getset","qualname":"::commands::PipelineCommands::getset","value":"fn <K, V> (&mut self, key: K, value: V) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Set the string value of a key and return its old value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1483},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":76212,"byte_end":76220,"line_start":186,"line_end":186,"column_start":8,"column_end":16},"name":"getrange","qualname":"::commands::PipelineCommands::getrange","value":"fn <K> (&mut self, key: K, from: isize, to: isize) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Get a range of bytes/substring from the value of a key. Negative values provide an offset from the end of the value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1485},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":76415,"byte_end":76423,"line_start":191,"line_end":191,"column_start":8,"column_end":16},"name":"setrange","qualname":"::commands::PipelineCommands::setrange","value":"fn <K, V> (&mut self, key: K, offset: isize, value: V) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Overwrite the part of the value stored in key at the specified offset.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1488},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":76594,"byte_end":76597,"line_start":196,"line_end":196,"column_start":8,"column_end":11},"name":"del","qualname":"::commands::PipelineCommands::del","value":"fn <K> (&mut self, key: K) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Delete one or more keys.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1490},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":76701,"byte_end":76707,"line_start":201,"line_end":201,"column_start":8,"column_end":14},"name":"exists","qualname":"::commands::PipelineCommands::exists","value":"fn <K> (&mut self, key: K) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Determine if a key exists.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1492},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":76824,"byte_end":76830,"line_start":206,"line_end":206,"column_start":8,"column_end":14},"name":"expire","qualname":"::commands::PipelineCommands::expire","value":"fn <K> (&mut self, key: K, seconds: usize) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Set a key's time to live in seconds.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1494},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":76989,"byte_end":76998,"line_start":211,"line_end":211,"column_start":8,"column_end":17},"name":"expire_at","qualname":"::commands::PipelineCommands::expire_at","value":"fn <K> (&mut self, key: K, ts: usize) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Set the expiration for a key as a UNIX timestamp.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1496},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":77141,"byte_end":77148,"line_start":216,"line_end":216,"column_start":8,"column_end":15},"name":"pexpire","qualname":"::commands::PipelineCommands::pexpire","value":"fn <K> (&mut self, key: K, ms: usize) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Set a key's time to live in milliseconds.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1498},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":77314,"byte_end":77324,"line_start":221,"line_end":221,"column_start":8,"column_end":18},"name":"pexpire_at","qualname":"::commands::PipelineCommands::pexpire_at","value":"fn <K> (&mut self, key: K, ts: usize) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Set the expiration for a key as a UNIX timestamp in milliseconds.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1500},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":77460,"byte_end":77467,"line_start":226,"line_end":226,"column_start":8,"column_end":15},"name":"persist","qualname":"::commands::PipelineCommands::persist","value":"fn <K> (&mut self, key: K) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Remove the expiration from a key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1502},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":77584,"byte_end":77587,"line_start":231,"line_end":231,"column_start":8,"column_end":11},"name":"ttl","qualname":"::commands::PipelineCommands::ttl","value":"fn <K> (&mut self, key: K) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Check the expiration time of a key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1504},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":77678,"byte_end":77684,"line_start":236,"line_end":236,"column_start":8,"column_end":14},"name":"rename","qualname":"::commands::PipelineCommands::rename","value":"fn <K> (&mut self, key: K, new_key: K) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Rename a key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1506},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":77839,"byte_end":77848,"line_start":241,"line_end":241,"column_start":8,"column_end":17},"name":"rename_nx","qualname":"::commands::PipelineCommands::rename_nx","value":"fn <K> (&mut self, key: K, new_key: K) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Rename a key, only if the new key does not exist.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1508},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":78013,"byte_end":78019,"line_start":248,"line_end":248,"column_start":8,"column_end":14},"name":"append","qualname":"::commands::PipelineCommands::append","value":"fn <K, V> (&mut self, key: K, value: V) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Append a value to a key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1511},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":78266,"byte_end":78270,"line_start":254,"line_end":254,"column_start":8,"column_end":12},"name":"incr","qualname":"::commands::PipelineCommands::incr","value":"fn <K, V> (&mut self, key: K, delta: V) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Increment the numeric value of a key by the given amount.  This\n issues a `INCRBY` or `INCRBYFLOAT` depending on the type.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1514},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":78593,"byte_end":78599,"line_start":263,"line_end":263,"column_start":8,"column_end":14},"name":"setbit","qualname":"::commands::PipelineCommands::setbit","value":"fn <K> (&mut self, key: K, offset: usize, value: bool) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Sets or clears the bit at offset in the string value stored at key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1516},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":78813,"byte_end":78819,"line_start":268,"line_end":268,"column_start":8,"column_end":14},"name":"getbit","qualname":"::commands::PipelineCommands::getbit","value":"fn <K> (&mut self, key: K, offset: usize) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Returns the bit value at offset in the string value stored at key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1518},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":78954,"byte_end":78962,"line_start":273,"line_end":273,"column_start":8,"column_end":16},"name":"bitcount","qualname":"::commands::PipelineCommands::bitcount","value":"fn <K> (&mut self, key: K) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Count set bits in a string.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1520},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":79083,"byte_end":79097,"line_start":278,"line_end":278,"column_start":8,"column_end":22},"name":"bitcount_range","qualname":"::commands::PipelineCommands::bitcount_range","value":"fn <K> (&mut self, key: K, start: usize, end: usize) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Count set bits in a string in a range.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1522},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":79349,"byte_end":79356,"line_start":284,"line_end":284,"column_start":8,"column_end":15},"name":"bit_and","qualname":"::commands::PipelineCommands::bit_and","value":"fn <K> (&mut self, dstkey: K, srckeys: K) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Perform a bitwise AND between multiple keys (containing string values)\n and store the result in the destination key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1524},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":79600,"byte_end":79606,"line_start":290,"line_end":290,"column_start":8,"column_end":14},"name":"bit_or","qualname":"::commands::PipelineCommands::bit_or","value":"fn <K> (&mut self, dstkey: K, srckeys: K) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Perform a bitwise OR between multiple keys (containing string values)\n and store the result in the destination key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1526},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":79850,"byte_end":79857,"line_start":296,"line_end":296,"column_start":8,"column_end":15},"name":"bit_xor","qualname":"::commands::PipelineCommands::bit_xor","value":"fn <K> (&mut self, dstkey: K, srckeys: K) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Perform a bitwise XOR between multiple keys (containing string values)\n and store the result in the destination key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1528},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":80091,"byte_end":80098,"line_start":302,"line_end":302,"column_start":8,"column_end":15},"name":"bit_not","qualname":"::commands::PipelineCommands::bit_not","value":"fn <K> (&mut self, dstkey: K, srckey: K) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Perform a bitwise NOT of the key (containing string values)\n and store the result in the destination key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1530},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":80262,"byte_end":80268,"line_start":307,"line_end":307,"column_start":8,"column_end":14},"name":"strlen","qualname":"::commands::PipelineCommands::strlen","value":"fn <K> (&mut self, key: K) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Get the length of the value stored in a key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1532},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":80420,"byte_end":80424,"line_start":314,"line_end":314,"column_start":8,"column_end":12},"name":"hget","qualname":"::commands::PipelineCommands::hget","value":"fn <K, F> (&mut self, key: K, field: F) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Gets a single (or multiple) fields from a hash.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1535},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":80636,"byte_end":80640,"line_start":319,"line_end":319,"column_start":8,"column_end":12},"name":"hdel","qualname":"::commands::PipelineCommands::hdel","value":"fn <K, F> (&mut self, key: K, field: F) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Deletes a single (or multiple) fields from a hash.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1538},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":80786,"byte_end":80790,"line_start":324,"line_end":324,"column_start":8,"column_end":12},"name":"hset","qualname":"::commands::PipelineCommands::hset","value":"fn <K, F, V> (&mut self, key: K, field: F, value: V) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Sets a single field in a hash.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1542},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":80994,"byte_end":81001,"line_start":329,"line_end":329,"column_start":8,"column_end":15},"name":"hset_nx","qualname":"::commands::PipelineCommands::hset_nx","value":"fn <K, F, V> (&mut self, key: K, field: F, value: V) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Sets a single field in a hash if it does not exist.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1546},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":81189,"byte_end":81202,"line_start":334,"line_end":334,"column_start":8,"column_end":21},"name":"hset_multiple","qualname":"::commands::PipelineCommands::hset_multiple","value":"fn <K, F, V> (&mut self, key: K, items: &[(F, V)]) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Sets a multiple fields in a hash.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1550},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":81362,"byte_end":81367,"line_start":339,"line_end":339,"column_start":8,"column_end":13},"name":"hincr","qualname":"::commands::PipelineCommands::hincr","value":"fn <K, F, D> (&mut self, key: K, field: F, delta: D) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Increments a value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1554},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":81697,"byte_end":81704,"line_start":348,"line_end":348,"column_start":8,"column_end":15},"name":"hexists","qualname":"::commands::PipelineCommands::hexists","value":"fn <K, F> (&mut self, key: K, field: F) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Checks if a field in a hash exists.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1557},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":81851,"byte_end":81856,"line_start":353,"line_end":353,"column_start":8,"column_end":13},"name":"hkeys","qualname":"::commands::PipelineCommands::hkeys","value":"fn <K> (&mut self, key: K) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Gets all the keys in a hash.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1559},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":81966,"byte_end":81971,"line_start":358,"line_end":358,"column_start":8,"column_end":13},"name":"hvals","qualname":"::commands::PipelineCommands::hvals","value":"fn <K> (&mut self, key: K) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Gets all the values in a hash.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1561},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":82092,"byte_end":82099,"line_start":363,"line_end":363,"column_start":8,"column_end":15},"name":"hgetall","qualname":"::commands::PipelineCommands::hgetall","value":"fn <K> (&mut self, key: K) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Gets all the fields and values in a hash.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1563},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":82207,"byte_end":82211,"line_start":368,"line_end":368,"column_start":8,"column_end":12},"name":"hlen","qualname":"::commands::PipelineCommands::hlen","value":"fn <K> (&mut self, key: K) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Gets the length of a hash.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1565},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":82390,"byte_end":82395,"line_start":375,"line_end":375,"column_start":8,"column_end":13},"name":"blpop","qualname":"::commands::PipelineCommands::blpop","value":"fn <K> (&mut self, key: K, timeout: usize) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Remove and get the first element in a list, or block until one is available.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1567},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":82579,"byte_end":82584,"line_start":380,"line_end":380,"column_start":8,"column_end":13},"name":"brpop","qualname":"::commands::PipelineCommands::brpop","value":"fn <K> (&mut self, key: K, timeout: usize) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Remove and get the last element in a list, or block until one is available.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1569},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":82797,"byte_end":82807,"line_start":386,"line_end":386,"column_start":8,"column_end":18},"name":"brpoplpush","qualname":"::commands::PipelineCommands::brpoplpush","value":"fn <K> (&mut self, srckey: K, dstkey: K, timeout: usize) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Pop a value from a list, push it to another list and return it;\n or block until one is available.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1571},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":82990,"byte_end":82996,"line_start":391,"line_end":391,"column_start":8,"column_end":14},"name":"lindex","qualname":"::commands::PipelineCommands::lindex","value":"fn <K> (&mut self, key: K, index: isize) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Get an element from a list by its index.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1573},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":83153,"byte_end":83167,"line_start":396,"line_end":396,"column_start":8,"column_end":22},"name":"linsert_before","qualname":"::commands::PipelineCommands::linsert_before","value":"fn <K, P, V> (&mut self, key: K, pivot: P, value: V) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Insert an element before another element in a list.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1577},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":83400,"byte_end":83413,"line_start":402,"line_end":402,"column_start":8,"column_end":21},"name":"linsert_after","qualname":"::commands::PipelineCommands::linsert_after","value":"fn <K, P, V> (&mut self, key: K, pivot: P, value: V) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Insert an element after another element in a list.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1581},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":83640,"byte_end":83644,"line_start":408,"line_end":408,"column_start":8,"column_end":12},"name":"llen","qualname":"::commands::PipelineCommands::llen","value":"fn <K> (&mut self, key: K) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Returns the length of the list stored at key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1583},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":83787,"byte_end":83791,"line_start":413,"line_end":413,"column_start":8,"column_end":12},"name":"lpop","qualname":"::commands::PipelineCommands::lpop","value":"fn <K> (&mut self, key: K) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Removes and returns the first element of the list stored at key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1585},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":83940,"byte_end":83945,"line_start":418,"line_end":418,"column_start":8,"column_end":13},"name":"lpush","qualname":"::commands::PipelineCommands::lpush","value":"fn <K, V> (&mut self, key: K, value: V) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Insert all the specified values at the head of the list stored at key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1588},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":84169,"byte_end":84181,"line_start":424,"line_end":424,"column_start":8,"column_end":20},"name":"lpush_exists","qualname":"::commands::PipelineCommands::lpush_exists","value":"fn <K, V> (&mut self, key: K, value: V) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Inserts a value at the head of the list stored at key, only if key\n already exists and holds a list.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1591},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":84356,"byte_end":84362,"line_start":429,"line_end":429,"column_start":8,"column_end":14},"name":"lrange","qualname":"::commands::PipelineCommands::lrange","value":"fn <K> (&mut self, key: K, start: isize, stop: isize) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Returns the specified elements of the list stored at key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1593},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":84590,"byte_end":84594,"line_start":435,"line_end":435,"column_start":8,"column_end":12},"name":"lrem","qualname":"::commands::PipelineCommands::lrem","value":"fn <K, V> (&mut self, key: K, count: isize, value: V) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Removes the first count occurrences of elements equal to value\n from the list stored at key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1596},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":84836,"byte_end":84841,"line_start":441,"line_end":441,"column_start":8,"column_end":13},"name":"ltrim","qualname":"::commands::PipelineCommands::ltrim","value":"fn <K> (&mut self, key: K, start: isize, stop: isize) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Trim an existing list so that it will contain only the specified\n range of elements specified.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1598},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":85008,"byte_end":85012,"line_start":446,"line_end":446,"column_start":8,"column_end":12},"name":"lset","qualname":"::commands::PipelineCommands::lset","value":"fn <K, V> (&mut self, key: K, index: isize, value: V) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Sets the list element at index to value\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1601},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":85216,"byte_end":85220,"line_start":451,"line_end":451,"column_start":8,"column_end":12},"name":"rpop","qualname":"::commands::PipelineCommands::rpop","value":"fn <K> (&mut self, key: K) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Removes and returns the last element of the list stored at key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1603},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":85362,"byte_end":85371,"line_start":456,"line_end":456,"column_start":8,"column_end":17},"name":"rpoplpush","qualname":"::commands::PipelineCommands::rpoplpush","value":"fn <K> (&mut self, key: K, dstkey: K) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Pop a value from a list, push it to another list and return it.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1605},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":85548,"byte_end":85553,"line_start":461,"line_end":461,"column_start":8,"column_end":13},"name":"rpush","qualname":"::commands::PipelineCommands::rpush","value":"fn <K, V> (&mut self, key: K, value: V) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Insert all the specified values at the tail of the list stored at key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1608},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":85775,"byte_end":85787,"line_start":467,"line_end":467,"column_start":8,"column_end":20},"name":"rpush_exists","qualname":"::commands::PipelineCommands::rpush_exists","value":"fn <K, V> (&mut self, key: K, value: V) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Inserts value at the tail of the list stored at key, only if key\n already exists and holds a list.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1611},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":85959,"byte_end":85963,"line_start":474,"line_end":474,"column_start":8,"column_end":12},"name":"sadd","qualname":"::commands::PipelineCommands::sadd","value":"fn <K, M> (&mut self, key: K, member: M) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Add one or more members to a set.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1614},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":86116,"byte_end":86121,"line_start":479,"line_end":479,"column_start":8,"column_end":13},"name":"scard","qualname":"::commands::PipelineCommands::scard","value":"fn <K> (&mut self, key: K) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Get the number of members in a set.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1616},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":86224,"byte_end":86229,"line_start":484,"line_end":484,"column_start":8,"column_end":13},"name":"sdiff","qualname":"::commands::PipelineCommands::sdiff","value":"fn <K> (&mut self, keys: K) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Subtract multiple sets.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1618},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":86371,"byte_end":86381,"line_start":489,"line_end":489,"column_start":8,"column_end":18},"name":"sdiffstore","qualname":"::commands::PipelineCommands::sdiffstore","value":"fn <K> (&mut self, dstkey: K, keys: K) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Subtract multiple sets and store the resulting set in a key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1620},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":86515,"byte_end":86521,"line_start":494,"line_end":494,"column_start":8,"column_end":14},"name":"sinter","qualname":"::commands::PipelineCommands::sinter","value":"fn <K> (&mut self, keys: K) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Intersect multiple sets.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1622},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":86665,"byte_end":86676,"line_start":499,"line_end":499,"column_start":8,"column_end":19},"name":"sinterstore","qualname":"::commands::PipelineCommands::sinterstore","value":"fn <K> (&mut self, dstkey: K, keys: K) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Intersect multiple sets and store the resulting set in a key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1624},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":86835,"byte_end":86844,"line_start":504,"line_end":504,"column_start":8,"column_end":17},"name":"sismember","qualname":"::commands::PipelineCommands::sismember","value":"fn <K, M> (&mut self, key: K, member: M) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Determine if a given value is a member of a set.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1627},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":86996,"byte_end":87004,"line_start":509,"line_end":509,"column_start":8,"column_end":16},"name":"smembers","qualname":"::commands::PipelineCommands::smembers","value":"fn <K> (&mut self, key: K) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Get all the members in a set.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1629},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":87125,"byte_end":87130,"line_start":514,"line_end":514,"column_start":8,"column_end":13},"name":"smove","qualname":"::commands::PipelineCommands::smove","value":"fn <K, M> (&mut self, srckey: K, dstkey: K, member: M) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Move a member from one set to another.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1632},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":87323,"byte_end":87327,"line_start":519,"line_end":519,"column_start":8,"column_end":12},"name":"spop","qualname":"::commands::PipelineCommands::spop","value":"fn <K> (&mut self, key: K) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Remove and return a random member from a set.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1634},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":87439,"byte_end":87450,"line_start":524,"line_end":524,"column_start":8,"column_end":19},"name":"srandmember","qualname":"::commands::PipelineCommands::srandmember","value":"fn <K> (&mut self, key: K) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Get one random member from a set.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1636},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":87575,"byte_end":87595,"line_start":529,"line_end":529,"column_start":8,"column_end":28},"name":"srandmember_multiple","qualname":"::commands::PipelineCommands::srandmember_multiple","value":"fn <K> (&mut self, key: K, count: usize) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Get multiple random members from a set.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1638},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":87744,"byte_end":87748,"line_start":534,"line_end":534,"column_start":8,"column_end":12},"name":"srem","qualname":"::commands::PipelineCommands::srem","value":"fn <K, M> (&mut self, key: K, member: M) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Remove one or more members from a set.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1641},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":87884,"byte_end":87890,"line_start":539,"line_end":539,"column_start":8,"column_end":14},"name":"sunion","qualname":"::commands::PipelineCommands::sunion","value":"fn <K> (&mut self, keys: K) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Add multiple sets.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1643},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":88028,"byte_end":88039,"line_start":544,"line_end":544,"column_start":8,"column_end":19},"name":"sunionstore","qualname":"::commands::PipelineCommands::sunionstore","value":"fn <K> (&mut self, dstkey: K, keys: K) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Add multiple sets and store the resulting set in a key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1645},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":88251,"byte_end":88255,"line_start":551,"line_end":551,"column_start":8,"column_end":12},"name":"zadd","qualname":"::commands::PipelineCommands::zadd","value":"fn <K, S, M> (&mut self, key: K, member: M, score: S) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Add one member to a sorted set, or update its score if it already exists.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1649},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":88489,"byte_end":88502,"line_start":556,"line_end":556,"column_start":8,"column_end":21},"name":"zadd_multiple","qualname":"::commands::PipelineCommands::zadd_multiple","value":"fn <K, S, M> (&mut self, key: K, items: &[(S, M)]) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Add multiple members to a sorted set, or update its score if it already exists.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1653},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":88684,"byte_end":88689,"line_start":561,"line_end":561,"column_start":8,"column_end":13},"name":"zcard","qualname":"::commands::PipelineCommands::zcard","value":"fn <K> (&mut self, key: K) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Get the number of members in a sorted set.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1655},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":88839,"byte_end":88845,"line_start":566,"line_end":566,"column_start":8,"column_end":14},"name":"zcount","qualname":"::commands::PipelineCommands::zcount","value":"fn <K, M, MM> (&mut self, key: K, min: M, max: MM) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Count the members in a sorted set with scores within the given values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1659},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":89123,"byte_end":89128,"line_start":572,"line_end":572,"column_start":8,"column_end":13},"name":"zincr","qualname":"::commands::PipelineCommands::zincr","value":"fn <K, M, D> (&mut self, key: K, member: M, delta: D) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Increments the member in a sorted set at key by delta.\n If the member does not exist, it is added with delta as its score.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1663},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":89407,"byte_end":89418,"line_start":578,"line_end":578,"column_start":8,"column_end":19},"name":"zinterstore","qualname":"::commands::PipelineCommands::zinterstore","value":"fn <K> (&mut self, dstkey: K, keys: &[K]) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Intersect multiple sorted sets and store the resulting sorted set in\n a new key using SUM as aggregation function.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1665},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":89669,"byte_end":89684,"line_start":584,"line_end":584,"column_start":8,"column_end":23},"name":"zinterstore_min","qualname":"::commands::PipelineCommands::zinterstore_min","value":"fn <K> (&mut self, dstkey: K, keys: &[K]) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Intersect multiple sorted sets and store the resulting sorted set in\n a new key using MIN as aggregation function.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1667},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":89963,"byte_end":89978,"line_start":590,"line_end":590,"column_start":8,"column_end":23},"name":"zinterstore_max","qualname":"::commands::PipelineCommands::zinterstore_max","value":"fn <K> (&mut self, dstkey: K, keys: &[K]) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Intersect multiple sorted sets and store the resulting sorted set in\n a new key using MAX as aggregation function.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1669},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":90218,"byte_end":90227,"line_start":595,"line_end":595,"column_start":8,"column_end":17},"name":"zlexcount","qualname":"::commands::PipelineCommands::zlexcount","value":"fn <K, L> (&mut self, key: K, min: L, max: L) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Count the number of members in a sorted set between a given lexicographical range.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1672},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":90412,"byte_end":90418,"line_start":600,"line_end":600,"column_start":8,"column_end":14},"name":"zrange","qualname":"::commands::PipelineCommands::zrange","value":"fn <K> (&mut self, key: K, start: isize, stop: isize) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Return a range of members in a sorted set, by index\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1674},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":90611,"byte_end":90628,"line_start":605,"line_end":605,"column_start":8,"column_end":25},"name":"zrange_withscores","qualname":"::commands::PipelineCommands::zrange_withscores","value":"fn <K> (&mut self, key: K, start: isize, stop: isize) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Return a range of members in a sorted set, by index with scores.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1676},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":90843,"byte_end":90854,"line_start":610,"line_end":610,"column_start":8,"column_end":19},"name":"zrangebylex","qualname":"::commands::PipelineCommands::zrangebylex","value":"fn <K, M, MM> (&mut self, key: K, min: M, max: MM) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Return a range of members in a sorted set, by lexicographical range.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1680},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":91106,"byte_end":91123,"line_start":616,"line_end":616,"column_start":8,"column_end":25},"name":"zrangebylex_limit","qualname":"::commands::PipelineCommands::zrangebylex_limit","value":"fn <K, M, MM> (&mut self, key: K, min: M, max: MM, offset: isize, count: isize) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Return a range of members in a sorted set, by lexicographical\n range with offset and limit.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1684},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":91423,"byte_end":91437,"line_start":622,"line_end":622,"column_start":8,"column_end":22},"name":"zrevrangebylex","qualname":"::commands::PipelineCommands::zrevrangebylex","value":"fn <K, MM, M> (&mut self, key: K, max: MM, min: M) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Return a range of members in a sorted set, by lexicographical range.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1688},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":91692,"byte_end":91712,"line_start":628,"line_end":628,"column_start":8,"column_end":28},"name":"zrevrangebylex_limit","qualname":"::commands::PipelineCommands::zrevrangebylex_limit","value":"fn <K, MM, M> (&mut self, key: K, max: MM, min: M, offset: isize, count: isize) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Return a range of members in a sorted set, by lexicographical\n range with offset and limit.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1692},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":91999,"byte_end":92012,"line_start":634,"line_end":634,"column_start":8,"column_end":21},"name":"zrangebyscore","qualname":"::commands::PipelineCommands::zrangebyscore","value":"fn <K, M, MM> (&mut self, key: K, min: M, max: MM) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Return a range of members in a sorted set, by score.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1696},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":92232,"byte_end":92256,"line_start":639,"line_end":639,"column_start":8,"column_end":32},"name":"zrangebyscore_withscores","qualname":"::commands::PipelineCommands::zrangebyscore_withscores","value":"fn <K, M, MM> (&mut self, key: K, min: M, max: MM) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Return a range of members in a sorted set, by score with scores.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1700},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":92493,"byte_end":92512,"line_start":644,"line_end":644,"column_start":8,"column_end":27},"name":"zrangebyscore_limit","qualname":"::commands::PipelineCommands::zrangebyscore_limit","value":"fn <K, M, MM> (&mut self, key: K, min: M, max: MM, offset: isize, count: isize) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Return a range of members in a sorted set, by score with limit.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1704},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":92821,"byte_end":92851,"line_start":650,"line_end":650,"column_start":8,"column_end":38},"name":"zrangebyscore_limit_withscores","qualname":"::commands::PipelineCommands::zrangebyscore_limit_withscores","value":"fn <K, M, MM> (&mut self, key: K, min: M, max: MM, offset: isize, count: isize) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Return a range of members in a sorted set, by score with limit with scores.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1708},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":93164,"byte_end":93169,"line_start":657,"line_end":657,"column_start":8,"column_end":13},"name":"zrank","qualname":"::commands::PipelineCommands::zrank","value":"fn <K, M> (&mut self, key: K, member: M) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Determine the index of a member in a sorted set.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1711},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":93333,"byte_end":93337,"line_start":662,"line_end":662,"column_start":8,"column_end":12},"name":"zrem","qualname":"::commands::PipelineCommands::zrem","value":"fn <K, M> (&mut self, key: K, members: M) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Remove one or more members from a sorted set.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1714},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":93532,"byte_end":93541,"line_start":667,"line_end":667,"column_start":8,"column_end":17},"name":"zrembylex","qualname":"::commands::PipelineCommands::zrembylex","value":"fn <K, M, MM> (&mut self, key: K, min: M, max: MM) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Remove all members in a sorted set between the given lexicographical range.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1718},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":93753,"byte_end":93763,"line_start":672,"line_end":672,"column_start":8,"column_end":18},"name":"zrembyrank","qualname":"::commands::PipelineCommands::zrembyrank","value":"fn <K> (&mut self, key: K, start: isize, stop: isize) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Remove all members in a sorted set within the given indexes.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1720},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":93955,"byte_end":93966,"line_start":677,"line_end":677,"column_start":8,"column_end":19},"name":"zrembyscore","qualname":"::commands::PipelineCommands::zrembyscore","value":"fn <K, M, MM> (&mut self, key: K, min: M, max: MM) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Remove all members in a sorted set within the given scores.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1724},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":94223,"byte_end":94232,"line_start":683,"line_end":683,"column_start":8,"column_end":17},"name":"zrevrange","qualname":"::commands::PipelineCommands::zrevrange","value":"fn <K> (&mut self, key: K, start: isize, stop: isize) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Return a range of members in a sorted set, by index, with scores\n ordered from high to low.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1726},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":94462,"byte_end":94482,"line_start":689,"line_end":689,"column_start":8,"column_end":28},"name":"zrevrange_withscores","qualname":"::commands::PipelineCommands::zrevrange_withscores","value":"fn <K> (&mut self, key: K, start: isize, stop: isize) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Return a range of members in a sorted set, by index, with scores\n ordered from high to low.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1728},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":94684,"byte_end":94700,"line_start":694,"line_end":694,"column_start":8,"column_end":24},"name":"zrevrangebyscore","qualname":"::commands::PipelineCommands::zrevrangebyscore","value":"fn <K, MM, M> (&mut self, key: K, max: MM, min: M) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Return a range of members in a sorted set, by score.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1732},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":94923,"byte_end":94950,"line_start":699,"line_end":699,"column_start":8,"column_end":35},"name":"zrevrangebyscore_withscores","qualname":"::commands::PipelineCommands::zrevrangebyscore_withscores","value":"fn <K, MM, M> (&mut self, key: K, max: MM, min: M) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Return a range of members in a sorted set, by score with scores.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1736},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":95190,"byte_end":95212,"line_start":704,"line_end":704,"column_start":8,"column_end":30},"name":"zrevrangebyscore_limit","qualname":"::commands::PipelineCommands::zrevrangebyscore_limit","value":"fn <K, MM, M> (&mut self, key: K, max: MM, min: M, offset: isize, count: isize) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Return a range of members in a sorted set, by score with limit.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1740},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":95524,"byte_end":95557,"line_start":710,"line_end":710,"column_start":8,"column_end":41},"name":"zrevrangebyscore_limit_withscores","qualname":"::commands::PipelineCommands::zrevrangebyscore_limit_withscores","value":"fn <K, MM, M> (&mut self, key: K, max: MM, min: M, offset: isize, count: isize) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Return a range of members in a sorted set, by score with limit with scores.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1744},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":95911,"byte_end":95919,"line_start":717,"line_end":717,"column_start":8,"column_end":16},"name":"zrevrank","qualname":"::commands::PipelineCommands::zrevrank","value":"fn <K, M> (&mut self, key: K, member: M) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Determine the index of a member in a sorted set, with scores ordered from high to low.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1747},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":96104,"byte_end":96110,"line_start":722,"line_end":722,"column_start":8,"column_end":14},"name":"zscore","qualname":"::commands::PipelineCommands::zscore","value":"fn <K, M> (&mut self, key: K, member: M) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Get the score associated with the given member in a sorted set.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1750},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":96348,"byte_end":96359,"line_start":728,"line_end":728,"column_start":8,"column_end":19},"name":"zunionstore","qualname":"::commands::PipelineCommands::zunionstore","value":"fn <K> (&mut self, dstkey: K, keys: &[K]) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Unions multiple sorted sets and store the resulting sorted set in\n a new key using SUM as aggregation function.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1752},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":96607,"byte_end":96622,"line_start":734,"line_end":734,"column_start":8,"column_end":23},"name":"zunionstore_min","qualname":"::commands::PipelineCommands::zunionstore_min","value":"fn <K> (&mut self, dstkey: K, keys: &[K]) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Unions multiple sorted sets and store the resulting sorted set in\n a new key using MIN as aggregation function.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1754},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":96898,"byte_end":96913,"line_start":740,"line_end":740,"column_start":8,"column_end":23},"name":"zunionstore_max","qualname":"::commands::PipelineCommands::zunionstore_max","value":"fn <K> (&mut self, dstkey: K, keys: &[K]) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Unions multiple sorted sets and store the resulting sorted set in\n a new key using MAX as aggregation function.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1756},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":97157,"byte_end":97162,"line_start":747,"line_end":747,"column_start":8,"column_end":13},"name":"pfadd","qualname":"::commands::PipelineCommands::pfadd","value":"fn <K, E> (&mut self, key: K, element: E) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Adds the specified elements to the specified HyperLogLog.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1759},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":97379,"byte_end":97386,"line_start":753,"line_end":753,"column_start":8,"column_end":15},"name":"pfcount","qualname":"::commands::PipelineCommands::pfcount","value":"fn <K> (&mut self, key: K) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Return the approximated cardinality of the set(s) observed by the\n HyperLogLog at key(s).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1761},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":97517,"byte_end":97524,"line_start":758,"line_end":758,"column_start":8,"column_end":15},"name":"pfmerge","qualname":"::commands::PipelineCommands::pfmerge","value":"fn <K> (&mut self, dstkey: K, srckeys: K) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Merge N different HyperLogLogs into a single one.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1763},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":97674,"byte_end":97681,"line_start":763,"line_end":763,"column_start":8,"column_end":15},"name":"publish","qualname":"::commands::PipelineCommands::publish","value":"fn <K, E> (&mut self, channel: K, message: E) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Posts a message to the given channel.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1766},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":99115,"byte_end":99122,"line_start":803,"line_end":803,"column_start":8,"column_end":15},"name":"geo_add","qualname":"::commands::PipelineCommands::geo_add","value":"fn <K, M> (&mut self, key: K, members: M) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Adds the specified geospatial items to the specified key.","sig":null,"attributes":[{"value":"cfg(feature = \"geospatial\")","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74428,"byte_end":74436,"line_start":132,"line_end":132,"column_start":19,"column_end":27}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1769},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":100218,"byte_end":100226,"line_start":839,"line_end":839,"column_start":8,"column_end":16},"name":"geo_dist","qualname":"::commands::PipelineCommands::geo_dist","value":"fn <K, M1, M2> (&mut self, key: K, member1: M1, member2: M2, unit: geo::Unit) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Return the distance between two members in the geospatial index\n represented by the sorted set.","sig":null,"attributes":[{"value":"cfg(feature = \"geospatial\")","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74428,"byte_end":74436,"line_start":132,"line_end":132,"column_start":19,"column_end":27}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1773},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":101226,"byte_end":101234,"line_start":872,"line_end":872,"column_start":8,"column_end":16},"name":"geo_hash","qualname":"::commands::PipelineCommands::geo_hash","value":"fn <K, M> (&mut self, key: K, members: M) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Return valid [Geohash][1] strings representing the position of one or\n more members of the geospatial index represented by the sorted set at\n key.","sig":null,"attributes":[{"value":"cfg(feature = \"geospatial\")","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74428,"byte_end":74436,"line_start":132,"line_end":132,"column_start":19,"column_end":27}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1776},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":102268,"byte_end":102275,"line_start":900,"line_end":900,"column_start":8,"column_end":15},"name":"geo_pos","qualname":"::commands::PipelineCommands::geo_pos","value":"fn <K, M> (&mut self, key: K, members: M) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Return the positions of all the specified members of the geospatial\n index represented by the sorted set at key.","sig":null,"attributes":[{"value":"cfg(feature = \"geospatial\")","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74428,"byte_end":74436,"line_start":132,"line_end":132,"column_start":19,"column_end":27}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1779},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":103355,"byte_end":103365,"line_start":924,"line_end":924,"column_start":8,"column_end":18},"name":"geo_radius","qualname":"::commands::PipelineCommands::geo_radius","value":"fn <K> (&mut self, key: K, longitude: f64, latitude: f64, radius: f64, unit: geo::Unit, options: geo::RadiusOptions) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Return the members of a sorted set populated with geospatial information\n using [`geo_add`](#method.geo_add), which are within the borders of the area\n specified with the center location and the maximum distance from the center\n (the radius).","sig":null,"attributes":[{"value":"cfg(feature = \"geospatial\")","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74428,"byte_end":74436,"line_start":132,"line_end":132,"column_start":19,"column_end":27}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1781},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":103898,"byte_end":103918,"line_start":944,"line_end":944,"column_start":8,"column_end":28},"name":"geo_radius_by_member","qualname":"::commands::PipelineCommands::geo_radius_by_member","value":"fn <K, M> (&mut self, key: K, member: M, radius: f64, unit: geo::Unit, options: geo::RadiusOptions) -> &mut Self","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":" Retrieve members selected by distance with the center of `member`. The\n member itself is always contained in the results.\n","sig":null,"attributes":[{"value":"cfg(feature = \"geospatial\")","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74428,"byte_end":74436,"line_start":132,"line_end":132,"column_start":19,"column_end":27}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":74455,"byte_end":74464,"line_start":133,"line_end":133,"column_start":17,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":431},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":104399,"byte_end":104407,"line_start":966,"line_end":966,"column_start":5,"column_end":13},"name":"Continue","qualname":"::commands::ControlFlow::Continue","value":"ControlFlow::Continue","parent":{"krate":0,"index":429},"children":[],"decl_id":null,"docs":" Continues.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":433},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":104442,"byte_end":104447,"line_start":968,"line_end":968,"column_start":5,"column_end":10},"name":"Break","qualname":"::commands::ControlFlow::Break","value":"ControlFlow::Break(U)","parent":{"krate":0,"index":429},"children":[],"decl_id":null,"docs":" Breaks with a value.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":429},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":104359,"byte_end":104370,"line_start":964,"line_end":964,"column_start":10,"column_end":21},"name":"ControlFlow","qualname":"::commands::ControlFlow","value":"ControlFlow::{Continue, Break}","parent":null,"children":[{"krate":0,"index":431},{"krate":0,"index":433}],"decl_id":null,"docs":" Allows pubsub callbacks to stop receiving messages.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":436},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":105650,"byte_end":105664,"line_start":1005,"line_end":1005,"column_start":11,"column_end":25},"name":"PubSubCommands","qualname":"::commands::PubSubCommands","value":"PubSubCommands: Sized","parent":null,"children":[{"krate":0,"index":437},{"krate":0,"index":441}],"decl_id":null,"docs":" The PubSub trait allows subscribing to one or more channels\n and receiving a callback whenever a message arrives.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":437},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":106022,"byte_end":106031,"line_start":1012,"line_end":1012,"column_start":8,"column_end":17},"name":"subscribe","qualname":"::commands::PubSubCommands::subscribe","value":"fn <C, F, U> (&mut self, _: C, _: F) -> RedisResult<U>","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" Subscribe to a list of channels using SUBSCRIBE and run the provided\n closure for each message received.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":106509,"byte_end":106519,"line_start":1022,"line_end":1022,"column_start":8,"column_end":18},"name":"psubscribe","qualname":"::commands::PubSubCommands::psubscribe","value":"fn <P, F, U> (&mut self, _: P, _: F) -> RedisResult<U>","parent":{"krate":0,"index":436},"children":[],"decl_id":null,"docs":" Subscribe to a list of channels using PSUBSCRIBE and run the provided\n closure for each message received.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":484},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":108450,"byte_end":108465,"line_start":23,"line_end":23,"column_start":8,"column_end":23},"name":"parse_redis_url","qualname":"::connection::parse_redis_url","value":"fn (input: &str) -> Result<url::Url, ()>","parent":null,"children":[],"decl_id":null,"docs":" This function takes a redis URL string and parses it into a URL\n as used by rust-url.  This is necessary as the default parser does\n not understand how redis URLs function.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1785},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":109045,"byte_end":109048,"line_start":41,"line_end":41,"column_start":5,"column_end":8},"name":"Tcp","qualname":"::connection::ConnectionAddr::Tcp","value":"ConnectionAddr::Tcp(String, u16)","parent":{"krate":0,"index":1784},"children":[],"decl_id":null,"docs":" Format for this is `(host, port)`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1789},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":109123,"byte_end":109127,"line_start":43,"line_end":43,"column_start":5,"column_end":9},"name":"Unix","qualname":"::connection::ConnectionAddr::Unix","value":"ConnectionAddr::Unix(PathBuf)","parent":{"krate":0,"index":1784},"children":[],"decl_id":null,"docs":" Format for this is the path to the unix socket.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1784},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":108981,"byte_end":108995,"line_start":39,"line_end":39,"column_start":10,"column_end":24},"name":"ConnectionAddr","qualname":"::connection::ConnectionAddr","value":"ConnectionAddr::{Tcp, Unix}","parent":null,"children":[{"krate":0,"index":1785},{"krate":0,"index":1789}],"decl_id":null,"docs":" Defines the connection address.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":109564,"byte_end":109576,"line_start":54,"line_end":54,"column_start":12,"column_end":24},"name":"is_supported","qualname":"<ConnectionAddr>::is_supported","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if this address is supported.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1799},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":109843,"byte_end":109857,"line_start":64,"line_end":64,"column_start":12,"column_end":26},"name":"ConnectionInfo","qualname":"::connection::ConnectionInfo","value":"ConnectionInfo { addr, db, passwd }","parent":null,"children":[{"krate":0,"index":1800},{"krate":0,"index":1801},{"krate":0,"index":1802}],"decl_id":null,"docs":" Holds the connection information that redis should use for connecting.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1800},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":109928,"byte_end":109932,"line_start":66,"line_end":66,"column_start":9,"column_end":13},"name":"addr","qualname":"::connection::ConnectionInfo::addr","value":"std::boxed::Box<connection::ConnectionAddr>","parent":{"krate":0,"index":1799},"children":[],"decl_id":null,"docs":" A boxed connection address for where to connect to.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1801},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":110021,"byte_end":110023,"line_start":68,"line_end":68,"column_start":9,"column_end":11},"name":"db","qualname":"::connection::ConnectionInfo::db","value":"i64","parent":{"krate":0,"index":1799},"children":[],"decl_id":null,"docs":" The database number to use.  This is usually `0`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1802},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":110104,"byte_end":110110,"line_start":70,"line_end":70,"column_start":9,"column_end":15},"name":"passwd","qualname":"::connection::ConnectionInfo::passwd","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":1799},"children":[],"decl_id":null,"docs":" Optionally a password that should be used for connection.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":487},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":110312,"byte_end":110330,"line_start":76,"line_end":76,"column_start":11,"column_end":29},"name":"IntoConnectionInfo","qualname":"::connection::IntoConnectionInfo","value":"IntoConnectionInfo","parent":null,"children":[{"krate":0,"index":488}],"decl_id":null,"docs":" Converts an object into a connection info struct.  This allows the\n constructor of the client to accept connection information in a\n range of different formats.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":110399,"byte_end":110419,"line_start":78,"line_end":78,"column_start":8,"column_end":28},"name":"into_connection_info","qualname":"::connection::IntoConnectionInfo::into_connection_info","value":"fn (self) -> RedisResult<ConnectionInfo>","parent":{"krate":0,"index":487},"children":[],"decl_id":null,"docs":" Converts the object into a connection info object.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":505},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":113627,"byte_end":113637,"line_start":184,"line_end":184,"column_start":12,"column_end":22},"name":"Connection","qualname":"::connection::Connection","value":"Connection {  }","parent":null,"children":[{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508}],"decl_id":null,"docs":" Represents a stateful redis TCP connection.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":509},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":114020,"byte_end":114026,"line_start":196,"line_end":196,"column_start":12,"column_end":18},"name":"PubSub","qualname":"::connection::PubSub","value":"PubSub {  }","parent":null,"children":[{"krate":0,"index":511}],"decl_id":null,"docs":" Represents a pubsub connection.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":512},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":114109,"byte_end":114112,"line_start":201,"line_end":201,"column_start":12,"column_end":15},"name":"Msg","qualname":"::connection::Msg","value":"Msg {  }","parent":null,"children":[{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515}],"decl_id":null,"docs":" Represents a pubsub message.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":524},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":120371,"byte_end":120385,"line_start":382,"line_end":382,"column_start":11,"column_end":25},"name":"ConnectionLike","qualname":"::connection::ConnectionLike","value":"ConnectionLike","parent":null,"children":[{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527}],"decl_id":null,"docs":" Implements the \"stateless\" part of the connection interface that is used by the\n different objects in redis-rs.  Primarily it obviously applies to `Connection`\n object but also some other objects implement the interface (for instance\n whole clients or certain redis results).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":525},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":120512,"byte_end":120530,"line_start":385,"line_end":385,"column_start":8,"column_end":26},"name":"req_packed_command","qualname":"::connection::ConnectionLike::req_packed_command","value":"fn (&mut self, cmd: &[u8]) -> RedisResult<Value>","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":" Sends an already encoded (packed) command into the TCP socket and\n reads the single response from it.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":120753,"byte_end":120772,"line_start":390,"line_end":390,"column_start":8,"column_end":27},"name":"req_packed_commands","qualname":"::connection::ConnectionLike::req_packed_commands","value":"fn (&mut self, cmd: &[u8], offset: usize, count: usize) -> RedisResult<Vec<Value>>","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":" Sends multiple already encoded (packed) command into the TCP socket\n and reads `count` responses from it.  This is used to implement\n pipelining.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":121145,"byte_end":121151,"line_start":401,"line_end":401,"column_start":8,"column_end":14},"name":"get_db","qualname":"::connection::ConnectionLike::get_db","value":"fn (&self) -> i64","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":" Returns the database this connection is bound to.  Note that this\n information might be unreliable because it's initially cached and\n also might be incorrect if the connection like object is not\n actually connected.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":121842,"byte_end":121861,"line_start":416,"line_end":416,"column_start":12,"column_end":31},"name":"send_packed_command","qualname":"<Connection>::send_packed_command","value":"fn (&mut self, cmd: &[u8]) -> RedisResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Sends an already encoded (packed) command into the TCP socket and\n does not read a response.  This is useful for commands like\n `MONITOR` which yield multiple items.  This needs to be used with\n care because it changes the state of the connection.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":122104,"byte_end":122117,"line_start":423,"line_end":423,"column_start":12,"column_end":25},"name":"recv_response","qualname":"<Connection>::recv_response","value":"fn (&mut self) -> RedisResult<Value>","parent":null,"children":[],"decl_id":null,"docs":" Fetches a single response from the connection.  This is useful\n if used in combination with `send_packed_command`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":122436,"byte_end":122453,"line_start":432,"line_end":432,"column_start":12,"column_end":29},"name":"set_write_timeout","qualname":"<Connection>::set_write_timeout","value":"fn (&self, dur: Option<Duration>) -> RedisResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the write timeout for the connection.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":122788,"byte_end":122804,"line_start":441,"line_end":441,"column_start":12,"column_end":28},"name":"set_read_timeout","qualname":"<Connection>::set_read_timeout","value":"fn (&self, dur: Option<Duration>) -> RedisResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the read timeout for the connection.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":122967,"byte_end":122976,"line_start":446,"line_end":446,"column_start":12,"column_end":21},"name":"as_pubsub","qualname":"<Connection>::as_pubsub","value":"fn (&mut self) -> PubSub<'_>","parent":null,"children":[],"decl_id":null,"docs":" Creats a pubsub instance.for this connection.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":126116,"byte_end":126123,"line_start":522,"line_end":522,"column_start":12,"column_end":19},"name":"is_open","qualname":"<Connection>::is_open","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns the connection status.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":127835,"byte_end":127844,"line_start":591,"line_end":591,"column_start":12,"column_end":21},"name":"subscribe","qualname":"<PubSub>::subscribe","value":"fn <T> (&mut self, channel: T) -> RedisResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Subscribes to a new channel.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":128034,"byte_end":128044,"line_start":596,"line_end":596,"column_start":12,"column_end":22},"name":"psubscribe","qualname":"<PubSub>::psubscribe","value":"fn <T> (&mut self, pchannel: T) -> RedisResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Subscribes to a new channel with a pattern.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":128222,"byte_end":128233,"line_start":601,"line_end":601,"column_start":12,"column_end":23},"name":"unsubscribe","qualname":"<PubSub>::unsubscribe","value":"fn <T> (&mut self, channel: T) -> RedisResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Unsubscribes from a channel.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":128425,"byte_end":128437,"line_start":606,"line_end":606,"column_start":12,"column_end":24},"name":"punsubscribe","qualname":"<PubSub>::punsubscribe","value":"fn <T> (&mut self, pchannel: T) -> RedisResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Unsubscribes from a channel with a pattern.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":128896,"byte_end":128907,"line_start":616,"line_end":616,"column_start":12,"column_end":23},"name":"get_message","qualname":"<PubSub>::get_message","value":"fn (&mut self) -> RedisResult<Msg>","parent":null,"children":[],"decl_id":null,"docs":" Fetches the next message from the pubsub connection.  Blocks until\n a message becomes available.  This currently does not provide a\n wait not to block :(","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":553},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":130095,"byte_end":130111,"line_start":649,"line_end":649,"column_start":12,"column_end":28},"name":"set_read_timeout","qualname":"<PubSub>::set_read_timeout","value":"fn (&self, dur: Option<Duration>) -> RedisResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the read timeout for the connection.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":558},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":130505,"byte_end":130516,"line_start":664,"line_end":664,"column_start":12,"column_end":23},"name":"get_channel","qualname":"<Msg>::get_channel","value":"fn <T> (&self) -> RedisResult<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the channel this message came on.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":560},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":130893,"byte_end":130909,"line_start":672,"line_end":672,"column_start":12,"column_end":28},"name":"get_channel_name","qualname":"<Msg>::get_channel_name","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Convenience method to get a string version of the channel.  Unless\n your channel contains non utf-8 bytes you can always use this\n method.  If the channel is not a valid string (which really should\n not happen) then the return value is `\"?\"`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":131137,"byte_end":131148,"line_start":680,"line_end":680,"column_start":12,"column_end":23},"name":"get_payload","qualname":"<Msg>::get_payload","value":"fn <T> (&self) -> RedisResult<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the message's payload in a specific format.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":563},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":131439,"byte_end":131456,"line_start":687,"line_end":687,"column_start":12,"column_end":29},"name":"get_payload_bytes","qualname":"<Msg>::get_payload_bytes","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the bytes that are the message's payload.  This can be used\n as an alternative to the `get_payload` function if you are interested\n in the raw bytes in it.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":564},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":131732,"byte_end":131744,"line_start":697,"line_end":697,"column_start":12,"column_end":24},"name":"from_pattern","qualname":"<Msg>::from_pattern","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the message was constructed from a pattern\n subscription.\n","sig":null,"attributes":[{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":131681,"byte_end":131720,"line_start":696,"line_end":696,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":565},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":132074,"byte_end":132085,"line_start":705,"line_end":705,"column_start":12,"column_end":23},"name":"get_pattern","qualname":"<Msg>::get_pattern","value":"fn <T> (&self) -> RedisResult<T>","parent":null,"children":[],"decl_id":null,"docs":" If the message was constructed from a message pattern this can be\n used to find out which one.  It's recommended to match against\n an `Option<String>` so that you do not need to use `from_pattern`\n to figure out if a pattern was set.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":567},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":133625,"byte_end":133636,"line_start":745,"line_end":745,"column_start":8,"column_end":19},"name":"transaction","qualname":"::connection::transaction","value":"fn <C, K, T, F> (con: &mut C, keys: &[K], func: F) -> RedisResult<T>","parent":null,"children":[],"decl_id":null,"docs":" This function simplifies transaction management slightly.  What it\n does is automatically watching keys and then going into a transaction\n loop util it succeeds.  Once it goes through the results are\n returned.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":653},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\parser.rs","byte_start":143621,"byte_end":143644,"line_start":271,"line_end":271,"column_start":8,"column_end":31},"name":"parse_redis_value_async","qualname":"::parser::parse_redis_value_async","value":"fn <R> (reader: R) -> impl Future<Item = (R, Value), Error = RedisError>","parent":null,"children":[],"decl_id":null,"docs":" Parses a redis value asynchronously.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":656},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\parser.rs","byte_start":143923,"byte_end":143929,"line_start":283,"line_end":283,"column_start":12,"column_end":18},"name":"Parser","qualname":"::parser::Parser","value":"Parser {  }","parent":null,"children":[{"krate":0,"index":658}],"decl_id":null,"docs":" The internal redis response parser.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":662},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\parser.rs","byte_start":144517,"byte_end":144520,"line_start":296,"line_end":296,"column_start":12,"column_end":15},"name":"new","qualname":"<Parser<T>>::new","value":"fn (reader: T) -> Parser<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new parser that parses the data behind the reader.  More\n than one value can be behind the reader in which case the parser can\n be invoked multiple times.  In other words: the stream does not have\n to be terminated.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":663},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\parser.rs","byte_start":144676,"byte_end":144687,"line_start":303,"line_end":303,"column_start":12,"column_end":23},"name":"parse_value","qualname":"<Parser<T>>::parse_value","value":"fn (&mut self) -> RedisResult<Value>","parent":null,"children":[],"decl_id":null,"docs":" Parses synchronously into a single value from the reader.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":664},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\parser.rs","byte_start":145261,"byte_end":145278,"line_start":320,"line_end":320,"column_start":8,"column_end":25},"name":"parse_redis_value","qualname":"::parser::parse_redis_value","value":"fn (bytes: &[u8]) -> RedisResult<Value>","parent":null,"children":[],"decl_id":null,"docs":" Parses bytes into a redis value.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":684},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\script.rs","byte_start":145672,"byte_end":145678,"line_start":10,"line_end":10,"column_start":12,"column_end":18},"name":"Script","qualname":"::script::Script","value":"Script {  }","parent":null,"children":[{"krate":0,"index":685},{"krate":0,"index":686}],"decl_id":null,"docs":" Represents a lua script.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":688},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\script.rs","byte_start":146365,"byte_end":146368,"line_start":32,"line_end":32,"column_start":12,"column_end":15},"name":"new","qualname":"<Script>::new","value":"fn (code: &str) -> Script","parent":null,"children":[],"decl_id":null,"docs":" Creates a new script object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":689},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\script.rs","byte_start":146655,"byte_end":146663,"line_start":42,"line_end":42,"column_start":12,"column_end":20},"name":"get_hash","qualname":"<Script>::get_hash","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the script's SHA1 hash in hexadecimal format.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":690},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\script.rs","byte_start":146797,"byte_end":146800,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"key","qualname":"<Script>::key","value":"fn <T> (&self, key: T) -> ScriptInvocation<'_>","parent":null,"children":[],"decl_id":null,"docs":" Creates a script invocation object with a key filled in.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\script.rs","byte_start":146776,"byte_end":146785,"line_start":47,"line_end":47,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":692},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\script.rs","byte_start":147089,"byte_end":147092,"line_start":58,"line_end":58,"column_start":12,"column_end":15},"name":"arg","qualname":"<Script>::arg","value":"fn <T> (&self, arg: T) -> ScriptInvocation<'_>","parent":null,"children":[],"decl_id":null,"docs":" Creates a script invocation object with an argument filled in.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\script.rs","byte_start":147068,"byte_end":147077,"line_start":57,"line_end":57,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":694},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\script.rs","byte_start":147532,"byte_end":147546,"line_start":70,"line_end":70,"column_start":12,"column_end":26},"name":"prepare_invoke","qualname":"<Script>::prepare_invoke","value":"fn (&self) -> ScriptInvocation<'_>","parent":null,"children":[],"decl_id":null,"docs":" Returns an empty script invocation object.  This is primarily useful\n for programmatically adding arguments and keys because the type will\n not change.  Normally you can use `arg` and `key` directly.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\script.rs","byte_start":147511,"byte_end":147520,"line_start":69,"line_end":69,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":695},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\script.rs","byte_start":147782,"byte_end":147788,"line_start":80,"line_end":80,"column_start":12,"column_end":18},"name":"invoke","qualname":"<Script>::invoke","value":"fn <T> (&self, con: &mut dyn ConnectionLike) -> RedisResult<T>","parent":null,"children":[],"decl_id":null,"docs":" Invokes the script directly without arguments.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\script.rs","byte_start":147761,"byte_end":147770,"line_start":79,"line_end":79,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":697},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\script.rs","byte_start":148060,"byte_end":148076,"line_start":91,"line_end":91,"column_start":12,"column_end":28},"name":"ScriptInvocation","qualname":"::script::ScriptInvocation","value":"ScriptInvocation {  }","parent":null,"children":[{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":701}],"decl_id":null,"docs":" Represents a prepared script call.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\script.rs","byte_start":148570,"byte_end":148573,"line_start":105,"line_end":105,"column_start":12,"column_end":15},"name":"arg","qualname":"<ScriptInvocation>::arg","value":"fn <'b, T> (&'b mut self, arg: T) -> &'b mut ScriptInvocation<'a>","parent":null,"children":[],"decl_id":null,"docs":" Adds a regular argument to the invocation.  This ends up as `ARGV[i]`\n in the script.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\script.rs","byte_start":148549,"byte_end":148558,"line_start":104,"line_end":104,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\script.rs","byte_start":148868,"byte_end":148871,"line_start":116,"line_end":116,"column_start":12,"column_end":15},"name":"key","qualname":"<ScriptInvocation>::key","value":"fn <'b, T> (&'b mut self, key: T) -> &'b mut ScriptInvocation<'a>","parent":null,"children":[],"decl_id":null,"docs":" Adds a key argument to the invocation.  This ends up as `KEYS[i]`\n in the script.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\script.rs","byte_start":148847,"byte_end":148856,"line_start":115,"line_end":115,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\script.rs","byte_start":149120,"byte_end":149126,"line_start":126,"line_end":126,"column_start":12,"column_end":18},"name":"invoke","qualname":"<ScriptInvocation>::invoke","value":"fn <T> (&self, con: &mut dyn ConnectionLike) -> RedisResult<T>","parent":null,"children":[],"decl_id":null,"docs":" Invokes the script and returns the result.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\script.rs","byte_start":149099,"byte_end":149108,"line_start":125,"line_end":125,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\script.rs","byte_start":150036,"byte_end":150048,"line_start":154,"line_end":154,"column_start":12,"column_end":24},"name":"invoke_async","qualname":"<ScriptInvocation>::invoke_async","value":"fn <C, T> (&self, con: C) -> impl Future<Item = (C, T), Error = RedisError>","parent":null,"children":[],"decl_id":null,"docs":" Asynchronously invokes the script and returns the result.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\script.rs","byte_start":150015,"byte_end":150024,"line_start":153,"line_end":153,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1876},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":153013,"byte_end":153023,"line_start":18,"line_end":18,"column_start":5,"column_end":15},"name":"NonNumeric","qualname":"::types::NumericBehavior::NonNumeric","value":"NumericBehavior::NonNumeric","parent":{"krate":0,"index":1875},"children":[],"decl_id":null,"docs":" This argument is not numeric.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1878},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":153066,"byte_end":153081,"line_start":20,"line_end":20,"column_start":5,"column_end":20},"name":"NumberIsInteger","qualname":"::types::NumericBehavior::NumberIsInteger","value":"NumericBehavior::NumberIsInteger","parent":{"krate":0,"index":1875},"children":[],"decl_id":null,"docs":" This argument is an integer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1880},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":153136,"byte_end":153149,"line_start":22,"line_end":22,"column_start":5,"column_end":18},"name":"NumberIsFloat","qualname":"::types::NumericBehavior::NumberIsFloat","value":"NumericBehavior::NumberIsFloat","parent":{"krate":0,"index":1875},"children":[],"decl_id":null,"docs":" This argument is a floating point value.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1875},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":152953,"byte_end":152968,"line_start":16,"line_end":16,"column_start":10,"column_end":25},"name":"NumericBehavior","qualname":"::types::NumericBehavior","value":"NumericBehavior::{NonNumeric, NumberIsInteger, NumberIsFloat}","parent":null,"children":[{"krate":0,"index":1876},{"krate":0,"index":1878},{"krate":0,"index":1880}],"decl_id":null,"docs":" Helper enum that is used in some situations to describe\n the behavior of arguments in a numeric context.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1892},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":153306,"byte_end":153319,"line_start":29,"line_end":29,"column_start":5,"column_end":18},"name":"ResponseError","qualname":"::types::ErrorKind::ResponseError","value":"ErrorKind::ResponseError","parent":{"krate":0,"index":1891},"children":[],"decl_id":null,"docs":" The server generated an invalid response.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1894},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":153376,"byte_end":153396,"line_start":31,"line_end":31,"column_start":5,"column_end":25},"name":"AuthenticationFailed","qualname":"::types::ErrorKind::AuthenticationFailed","value":"ErrorKind::AuthenticationFailed","parent":{"krate":0,"index":1891},"children":[],"decl_id":null,"docs":" The authentication with the server failed.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1896},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":153455,"byte_end":153464,"line_start":33,"line_end":33,"column_start":5,"column_end":14},"name":"TypeError","qualname":"::types::ErrorKind::TypeError","value":"ErrorKind::TypeError","parent":{"krate":0,"index":1891},"children":[],"decl_id":null,"docs":" Operation failed because of a type mismatch.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1898},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":153510,"byte_end":153524,"line_start":35,"line_end":35,"column_start":5,"column_end":19},"name":"ExecAbortError","qualname":"::types::ErrorKind::ExecAbortError","value":"ErrorKind::ExecAbortError","parent":{"krate":0,"index":1891},"children":[],"decl_id":null,"docs":" A script execution was aborted.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1900},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":153594,"byte_end":153610,"line_start":37,"line_end":37,"column_start":5,"column_end":21},"name":"BusyLoadingError","qualname":"::types::ErrorKind::BusyLoadingError","value":"ErrorKind::BusyLoadingError","parent":{"krate":0,"index":1891},"children":[],"decl_id":null,"docs":" The server cannot response because it's loading a dump.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1902},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":153677,"byte_end":153690,"line_start":39,"line_end":39,"column_start":5,"column_end":18},"name":"NoScriptError","qualname":"::types::ErrorKind::NoScriptError","value":"ErrorKind::NoScriptError","parent":{"krate":0,"index":1891},"children":[],"decl_id":null,"docs":" A script that was requested does not actually exist.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1904},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":153785,"byte_end":153804,"line_start":42,"line_end":42,"column_start":5,"column_end":24},"name":"InvalidClientConfig","qualname":"::types::ErrorKind::InvalidClientConfig","value":"ErrorKind::InvalidClientConfig","parent":{"krate":0,"index":1891},"children":[],"decl_id":null,"docs":" An error that was caused because the parameter to the\n client were wrong.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1906},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":153973,"byte_end":153980,"line_start":46,"line_end":46,"column_start":5,"column_end":12},"name":"IoError","qualname":"::types::ErrorKind::IoError","value":"ErrorKind::IoError","parent":{"krate":0,"index":1891},"children":[],"decl_id":null,"docs":" This kind is returned if the redis error is one that is\n not native to the system.  This is usually the case if\n the cause is another error.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1908},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":154110,"byte_end":154124,"line_start":49,"line_end":49,"column_start":5,"column_end":19},"name":"ExtensionError","qualname":"::types::ErrorKind::ExtensionError","value":"ErrorKind::ExtensionError","parent":{"krate":0,"index":1891},"children":[],"decl_id":null,"docs":" An extension error.  This is an error created by the server\n that is not directly understood by the library.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1891},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":153240,"byte_end":153249,"line_start":27,"line_end":27,"column_start":10,"column_end":19},"name":"ErrorKind","qualname":"::types::ErrorKind","value":"ErrorKind::{ResponseError, AuthenticationFailed, TypeError, ExecAbortError, BusyLoadingError, NoScriptError, InvalidClientConfig, IoError, ExtensionError}","parent":null,"children":[{"krate":0,"index":1892},{"krate":0,"index":1894},{"krate":0,"index":1896},{"krate":0,"index":1898},{"krate":0,"index":1900},{"krate":0,"index":1902},{"krate":0,"index":1904},{"krate":0,"index":1906},{"krate":0,"index":1908}],"decl_id":null,"docs":" An enum of all error kinds.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1920},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":154263,"byte_end":154266,"line_start":56,"line_end":56,"column_start":5,"column_end":8},"name":"Nil","qualname":"::types::Value::Nil","value":"Value::Nil","parent":{"krate":0,"index":1919},"children":[],"decl_id":null,"docs":" A nil response from the server.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1922},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":154519,"byte_end":154522,"line_start":61,"line_end":61,"column_start":5,"column_end":8},"name":"Int","qualname":"::types::Value::Int","value":"Value::Int(i64)","parent":{"krate":0,"index":1919},"children":[],"decl_id":null,"docs":" An integer response.  Note that there are a few situations\n in which redis actually returns a string for an integer which\n is why this library generally treats integers and strings\n the same for all numeric responses.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1925},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":154566,"byte_end":154570,"line_start":63,"line_end":63,"column_start":5,"column_end":9},"name":"Data","qualname":"::types::Value::Data","value":"Value::Data(Vec<u8>)","parent":{"krate":0,"index":1919},"children":[],"decl_id":null,"docs":" An arbitary binary data.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1928},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":154694,"byte_end":154698,"line_start":66,"line_end":66,"column_start":5,"column_end":9},"name":"Bulk","qualname":"::types::Value::Bulk","value":"Value::Bulk(Vec<Value>)","parent":{"krate":0,"index":1919},"children":[],"decl_id":null,"docs":" A bulk response of more data.  This is generally used by redis\n to express nested structures.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1931},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":154743,"byte_end":154749,"line_start":68,"line_end":68,"column_start":5,"column_end":11},"name":"Status","qualname":"::types::Value::Status","value":"Value::Status(String)","parent":{"krate":0,"index":1919},"children":[],"decl_id":null,"docs":" A status response.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1934},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":154823,"byte_end":154827,"line_start":70,"line_end":70,"column_start":5,"column_end":9},"name":"Okay","qualname":"::types::Value::Okay","value":"Value::Okay","parent":{"krate":0,"index":1919},"children":[],"decl_id":null,"docs":" A status response which represents the string \"OK\".\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1919},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":154211,"byte_end":154216,"line_start":54,"line_end":54,"column_start":10,"column_end":15},"name":"Value","qualname":"::types::Value","value":"Value::{Nil, Int, Data, Bulk, Status, Okay}","parent":null,"children":[{"krate":0,"index":1920},{"krate":0,"index":1922},{"krate":0,"index":1925},{"krate":0,"index":1928},{"krate":0,"index":1931},{"krate":0,"index":1934}],"decl_id":null,"docs":" Internal low-level redis value enum.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":758},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":155432,"byte_end":155449,"line_start":85,"line_end":85,"column_start":12,"column_end":29},"name":"looks_like_cursor","qualname":"<Value>::looks_like_cursor","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if the return value looks like it fulfils the cursor\n protocol.  That means the result is a bulk item of length\n two with the first one being a cursor and the second a\n bulk response.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":761},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":157187,"byte_end":157197,"line_start":140,"line_end":140,"column_start":12,"column_end":22},"name":"RedisError","qualname":"::types::RedisError","value":"RedisError {  }","parent":null,"children":[{"krate":0,"index":762}],"decl_id":null,"docs":" Represents a redis error.  For the most part you should be using\n the Error trait to interact with this rather than the actual\n struct.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":781},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":160371,"byte_end":160375,"line_start":248,"line_end":248,"column_start":12,"column_end":16},"name":"kind","qualname":"<RedisError>::kind","value":"fn (&self) -> ErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Returns the kind of the error.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":782},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":160778,"byte_end":160786,"line_start":258,"line_end":258,"column_start":12,"column_end":20},"name":"category","qualname":"<RedisError>::category","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the name of the error category for display purposes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":783},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":161453,"byte_end":161464,"line_start":273,"line_end":273,"column_start":12,"column_end":23},"name":"is_io_error","qualname":"<RedisError>::is_io_error","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Indicates that this failure is an IO failure.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":784},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":161843,"byte_end":161864,"line_start":284,"line_end":284,"column_start":12,"column_end":33},"name":"is_connection_refusal","qualname":"<RedisError>::is_connection_refusal","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this error indicates that the connection was\n refused.  You should generally not rely much on this function\n unless you are writing unit tests that want to detect if a\n local server is available.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":785},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":162544,"byte_end":162554,"line_start":302,"line_end":302,"column_start":12,"column_end":22},"name":"is_timeout","qualname":"<RedisError>::is_timeout","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if error was caused by I/O time out.\n Note that this may not be accurate depending on platform.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":786},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":162921,"byte_end":162942,"line_start":314,"line_end":314,"column_start":12,"column_end":33},"name":"is_connection_dropped","qualname":"<RedisError>::is_connection_dropped","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if error was caused by a dropped connection.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":787},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":163268,"byte_end":163288,"line_start":325,"line_end":325,"column_start":12,"column_end":32},"name":"extension_error_code","qualname":"<RedisError>::extension_error_code","value":"fn (&self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Returns the extension error code\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":789},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":163836,"byte_end":163847,"line_start":346,"line_end":346,"column_start":10,"column_end":21},"name":"RedisResult","qualname":"::types::RedisResult","value":"Result<T, RedisError>","parent":null,"children":[],"decl_id":null,"docs":" Library generic result type.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":791},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":163919,"byte_end":163930,"line_start":349,"line_end":349,"column_start":10,"column_end":21},"name":"RedisFuture","qualname":"::types::RedisFuture","value":"Box<dyn Future<Item = T, Error = RedisError> + Send>","parent":null,"children":[],"decl_id":null,"docs":" Library generic future type.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1962},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":164048,"byte_end":164056,"line_start":353,"line_end":353,"column_start":12,"column_end":20},"name":"InfoDict","qualname":"::types::InfoDict","value":"InfoDict {  }","parent":null,"children":[{"krate":0,"index":1963}],"decl_id":null,"docs":" An info dictionary type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":794},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":165034,"byte_end":165037,"line_start":378,"line_end":378,"column_start":12,"column_end":15},"name":"new","qualname":"<InfoDict>::new","value":"fn (kvpairs: &str) -> InfoDict","parent":null,"children":[],"decl_id":null,"docs":" Creates a new info dictionary from a string in the response of\n the INFO command.  Each line is a key, value pair with the\n key and value separated by a colon (`:`).  Lines starting with a\n hash (`#`) are ignored.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":795},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":165642,"byte_end":165645,"line_start":394,"line_end":394,"column_start":12,"column_end":15},"name":"get","qualname":"<InfoDict>::get","value":"fn <T> (&self, key: &str) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Fetches a value by key and converts it into the given type.\n Typical types are `String`, `bool` and integer types.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":797},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":165879,"byte_end":165883,"line_start":402,"line_end":402,"column_start":12,"column_end":16},"name":"find","qualname":"<InfoDict>::find","value":"fn (&self, key: &&str) -> Option<&Value>","parent":null,"children":[],"decl_id":null,"docs":" Looks up a key in the info dict.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":798},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":166023,"byte_end":166035,"line_start":407,"line_end":407,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<InfoDict>::contains_key","value":"fn (&self, key: &&str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if a key is contained in the info dicf.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":799},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":166159,"byte_end":166162,"line_start":412,"line_end":412,"column_start":12,"column_end":15},"name":"len","qualname":"<InfoDict>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the size of the info dict.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":800},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":166259,"byte_end":166267,"line_start":417,"line_end":417,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<InfoDict>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if the dict is empty.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":801},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":166386,"byte_end":166396,"line_start":423,"line_end":423,"column_start":11,"column_end":21},"name":"RedisWrite","qualname":"::types::RedisWrite","value":"RedisWrite","parent":null,"children":[{"krate":0,"index":802}],"decl_id":null,"docs":" Abstraction trait for redis command abstractions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":802},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":166450,"byte_end":166459,"line_start":425,"line_end":425,"column_start":8,"column_end":17},"name":"write_arg","qualname":"::types::RedisWrite::write_arg","value":"fn (&mut self, arg: &[u8]) -> ()","parent":{"krate":0,"index":801},"children":[],"decl_id":null,"docs":" Accepts a serialized redis command.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":805},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":166806,"byte_end":166817,"line_start":437,"line_end":437,"column_start":11,"column_end":22},"name":"ToRedisArgs","qualname":"::types::ToRedisArgs","value":"ToRedisArgs: Sized","parent":null,"children":[{"krate":0,"index":806},{"krate":0,"index":807},{"krate":0,"index":809},{"krate":0,"index":810},{"krate":0,"index":811},{"krate":0,"index":813},{"krate":0,"index":817}],"decl_id":null,"docs":" Used to convert a value into one or multiple redis argument\n strings.  Most values will produce exactly one item but in\n some cases it might make sense to produce more than one.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":806},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":167062,"byte_end":167075,"line_start":443,"line_end":443,"column_start":8,"column_end":21},"name":"to_redis_args","qualname":"::types::ToRedisArgs::to_redis_args","value":"fn (&self) -> Vec<Vec<u8>>","parent":{"krate":0,"index":805},"children":[],"decl_id":null,"docs":" This converts the value into a vector of bytes.  Each item\n is a single argument.  Most items generate a vector of a\n single item.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":807},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":167408,"byte_end":167424,"line_start":453,"line_end":453,"column_start":8,"column_end":24},"name":"write_redis_args","qualname":"::types::ToRedisArgs::write_redis_args","value":"fn <W> (&self, out: &mut W) -> ()","parent":{"krate":0,"index":805},"children":[],"decl_id":null,"docs":" This writes the value into a vector of bytes.  Each item\n is a single argument.  Most items generate a single item.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":809},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":167782,"byte_end":167807,"line_start":461,"line_end":461,"column_start":8,"column_end":33},"name":"describe_numeric_behavior","qualname":"::types::ToRedisArgs::describe_numeric_behavior","value":"fn (&self) -> NumericBehavior","parent":{"krate":0,"index":805},"children":[],"decl_id":null,"docs":" Returns an information about the contained value with regards\n to it's numeric behavior in a redis context.  This is used in\n some high level concepts to switch between different implementations\n of redis functions (for instance `INCR` vs `INCRBYFLOAT`).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":810},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":168140,"byte_end":168153,"line_start":469,"line_end":469,"column_start":8,"column_end":21},"name":"is_single_arg","qualname":"::types::ToRedisArgs::is_single_arg","value":"fn (&self) -> bool","parent":{"krate":0,"index":805},"children":[],"decl_id":null,"docs":" Returns an indiciation if the value contained is exactly one\n argument.  It returns false if it's zero or more than one.  This\n is used in some high level functions to intelligently switch\n between `GET` and `MGET` variants.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":811},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":168309,"byte_end":168321,"line_start":476,"line_end":476,"column_start":8,"column_end":20},"name":"make_arg_vec","qualname":"::types::ToRedisArgs::make_arg_vec","value":"fn <W> (items: &[Self], out: &mut W) -> ()","parent":{"krate":0,"index":805},"children":[],"decl_id":null,"docs":" This only exists internally as a workaround for the lack of\n specialization.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":813},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":168612,"byte_end":168629,"line_start":488,"line_end":488,"column_start":8,"column_end":25},"name":"make_arg_iter_ref","qualname":"::types::ToRedisArgs::make_arg_iter_ref","value":"fn <'a, I, W> (items: I, out: &mut W) -> ()","parent":{"krate":0,"index":805},"children":[],"decl_id":null,"docs":" This only exists internally as a workaround for the lack of\n specialization.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":817},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":168878,"byte_end":168895,"line_start":500,"line_end":500,"column_start":8,"column_end":25},"name":"is_single_vec_arg","qualname":"::types::ToRedisArgs::is_single_vec_arg","value":"fn (items: &[Self]) -> bool","parent":{"krate":0,"index":805},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":879},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":177436,"byte_end":177450,"line_start":797,"line_end":797,"column_start":11,"column_end":25},"name":"FromRedisValue","qualname":"::types::FromRedisValue","value":"FromRedisValue: Sized","parent":null,"children":[{"krate":0,"index":880},{"krate":0,"index":881},{"krate":0,"index":882}],"decl_id":null,"docs":" This trait is used to convert a redis value into a more appropriate\n type.  While a redis `Value` can represent any response that comes\n back from the redis server, usually you want to map this into something\n that works better in rust.  For instance you might want to convert the\n return value into a `String` or an integer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":880},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":177652,"byte_end":177668,"line_start":801,"line_end":801,"column_start":8,"column_end":24},"name":"from_redis_value","qualname":"::types::FromRedisValue::from_redis_value","value":"fn (v: &Value) -> RedisResult<Self>","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Given a redis `Value` this attempts to convert it into the given\n destination type.  If that fails because it's not compatible an\n appropriate error is generated.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":881},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":177913,"byte_end":177930,"line_start":806,"line_end":806,"column_start":8,"column_end":25},"name":"from_redis_values","qualname":"::types::FromRedisValue::from_redis_values","value":"fn (items: &[Value]) -> RedisResult<Vec<Self>>","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Similar to `from_redis_value` but constructs a vector of objects\n from another vector of values.  This primarily exists internally\n to customize the behavior for vectors of tuples.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":882},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":178304,"byte_end":178317,"line_start":819,"line_end":819,"column_start":8,"column_end":21},"name":"from_byte_vec","qualname":"::types::FromRedisValue::from_byte_vec","value":"fn (_vec: &[u8]) -> Option<Vec<Self>>","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" This only exists internally as a workaround for the lack of\n specialization.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":922},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":187370,"byte_end":187386,"line_start":1085,"line_end":1085,"column_start":8,"column_end":24},"name":"from_redis_value","qualname":"::types::from_redis_value","value":"fn <T> (v: &Value) -> RedisResult<T>","parent":null,"children":[],"decl_id":null,"docs":" A shortcut function to invoke `FromRedisValue::from_redis_value`\n to make the API slightly nicer.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","byte_start":14686,"byte_end":14698,"line_start":34,"line_end":34,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","byte_start":15162,"byte_end":15174,"line_start":53,"line_end":53,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","byte_start":16725,"byte_end":16735,"line_start":108,"line_end":108,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":123}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","byte_start":21130,"byte_end":21140,"line_start":228,"line_end":228,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":143}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","byte_start":23782,"byte_end":23790,"line_start":305,"line_end":305,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","byte_start":24078,"byte_end":24090,"line_start":322,"line_end":322,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":173},{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","byte_start":25862,"byte_end":25874,"line_start":369,"line_end":369,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","byte_start":27578,"byte_end":27586,"line_start":425,"line_end":425,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":185},{"krate":0,"index":190},{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","byte_start":29776,"byte_end":29792,"line_start":503,"line_end":503,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","byte_start":30743,"byte_end":30759,"line_start":529,"line_end":529,"column_start":25,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":204},{"krate":0,"index":208},{"krate":0,"index":212}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":33314,"byte_end":33318,"line_start":31,"line_end":31,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":233}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":34139,"byte_end":34144,"line_start":63,"line_end":63,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":237}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":34391,"byte_end":34396,"line_start":73,"line_end":73,"column_start":44,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":240}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":34941,"byte_end":34946,"line_start":88,"line_end":88,"column_start":38,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":243},{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":35703,"byte_end":35714,"line_start":117,"line_end":117,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":36757,"byte_end":36770,"line_start":157,"line_end":157,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":38140,"byte_end":38153,"line_start":200,"line_end":200,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":265},{"krate":0,"index":267}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":39598,"byte_end":39616,"line_start":257,"line_end":257,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":273}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":40305,"byte_end":40323,"line_start":279,"line_end":279,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":275}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\client.rs","byte_start":43616,"byte_end":43622,"line_start":28,"line_end":28,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":291},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":296},{"krate":0,"index":299}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\client.rs","byte_start":45607,"byte_end":45613,"line_start":79,"line_end":79,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":46899,"byte_end":46903,"line_start":40,"line_end":40,"column_start":42,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":329},{"krate":0,"index":330}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":50868,"byte_end":50871,"line_start":189,"line_end":189,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":349}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":51075,"byte_end":51078,"line_start":197,"line_end":197,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":351}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":52038,"byte_end":52041,"line_start":230,"line_end":230,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":364},{"krate":0,"index":369},{"krate":0,"index":372},{"krate":0,"index":373}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":58316,"byte_end":58324,"line_start":411,"line_end":411,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":377}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":59374,"byte_end":59382,"line_start":438,"line_end":438,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":398},{"krate":0,"index":401},{"krate":0,"index":407}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":106671,"byte_end":106672,"line_start":1027,"line_end":1027,"column_start":22,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":106725,"byte_end":106735,"line_start":1029,"line_end":1029,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":448},{"krate":0,"index":452}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":107727,"byte_end":107735,"line_start":1063,"line_end":1063,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":457}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":109146,"byte_end":109160,"line_start":46,"line_end":46,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":486}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":110489,"byte_end":110503,"line_start":81,"line_end":81,"column_start":29,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":490}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":112860,"byte_end":112863,"line_start":151,"line_end":151,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":497}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":114191,"byte_end":114207,"line_start":207,"line_end":207,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":121541,"byte_end":121551,"line_start":411,"line_end":411,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":126201,"byte_end":126211,"line_start":527,"line_end":527,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":127700,"byte_end":127706,"line_start":585,"line_end":585,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":546},{"krate":0,"index":548},{"krate":0,"index":550},{"krate":0,"index":552},{"krate":0,"index":553}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":130229,"byte_end":130235,"line_start":654,"line_end":654,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":556}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":130438,"byte_end":130441,"line_start":662,"line_end":662,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":558},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":565}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\parser.rs","byte_start":135167,"byte_end":135179,"line_start":23,"line_end":23,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":623}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\parser.rs","byte_start":135324,"byte_end":135336,"line_start":32,"line_end":32,"column_start":40,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":628}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\parser.rs","byte_start":138987,"byte_end":138997,"line_start":144,"line_end":144,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":634}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\parser.rs","byte_start":139233,"byte_end":139243,"line_start":153,"line_end":153,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":638}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\parser.rs","byte_start":140551,"byte_end":140562,"line_start":192,"line_end":192,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":650}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\parser.rs","byte_start":144239,"byte_end":144245,"line_start":291,"line_end":291,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":662},{"krate":0,"index":663}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\script.rs","byte_start":146308,"byte_end":146314,"line_start":30,"line_end":30,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":688},{"krate":0,"index":689},{"krate":0,"index":690},{"krate":0,"index":692},{"krate":0,"index":694},{"krate":0,"index":695}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\script.rs","byte_start":148421,"byte_end":148437,"line_start":101,"line_end":101,"column_start":10,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":704},{"krate":0,"index":707},{"krate":0,"index":710},{"krate":0,"index":712}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\script.rs","byte_start":151099,"byte_end":151116,"line_start":193,"line_end":193,"column_start":23,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":735},{"krate":0,"index":736},{"krate":0,"index":737}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":155193,"byte_end":155198,"line_start":80,"line_end":80,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":758}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":156076,"byte_end":156081,"line_start":110,"line_end":110,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":760}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":157449,"byte_end":157459,"line_start":152,"line_end":152,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":764}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":158082,"byte_end":158092,"line_start":170,"line_end":170,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":766}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":158247,"byte_end":158257,"line_start":178,"line_end":178,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":768}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":158468,"byte_end":158478,"line_start":186,"line_end":186,"column_start":42,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":770}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":158697,"byte_end":158707,"line_start":194,"line_end":194,"column_start":50,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":772}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":158932,"byte_end":158942,"line_start":202,"line_end":202,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":774},{"krate":0,"index":775}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":159494,"byte_end":159504,"line_start":220,"line_end":220,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":777}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":160124,"byte_end":160134,"line_start":239,"line_end":239,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":779}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":160308,"byte_end":160318,"line_start":246,"line_end":246,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":781},{"krate":0,"index":782},{"krate":0,"index":783},{"krate":0,"index":784},{"krate":0,"index":785},{"krate":0,"index":786},{"krate":0,"index":787}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":164769,"byte_end":164777,"line_start":373,"line_end":373,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":794},{"krate":0,"index":795},{"krate":0,"index":797},{"krate":0,"index":798},{"krate":0,"index":799},{"krate":0,"index":800}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":166507,"byte_end":166510,"line_start":428,"line_end":428,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":804}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":171659,"byte_end":171665,"line_start":597,"line_end":597,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":832}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":172207,"byte_end":172210,"line_start":624,"line_end":624,"column_start":38,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":844},{"krate":0,"index":846}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":172789,"byte_end":172795,"line_start":650,"line_end":650,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":855},{"krate":0,"index":857},{"krate":0,"index":858}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":173569,"byte_end":173576,"line_start":678,"line_end":678,"column_start":76,"column_end":83},"value":"","parent":null,"children":[{"krate":0,"index":862},{"krate":0,"index":864}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":174018,"byte_end":174026,"line_start":694,"line_end":694,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":867},{"krate":0,"index":869}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":174549,"byte_end":174557,"line_start":711,"line_end":711,"column_start":72,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":873},{"krate":0,"index":875}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":180547,"byte_end":180553,"line_start":894,"line_end":894,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":891}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":180959,"byte_end":180962,"line_start":905,"line_end":905,"column_start":44,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":894}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":181730,"byte_end":181737,"line_start":922,"line_end":922,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":899}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":182352,"byte_end":182360,"line_start":939,"line_end":939,"column_start":75,"column_end":83},"value":"","parent":null,"children":[{"krate":0,"index":903}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":182993,"byte_end":183000,"line_start":958,"line_end":958,"column_start":82,"column_end":89},"value":"","parent":null,"children":[{"krate":0,"index":907}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":183493,"byte_end":183501,"line_start":973,"line_end":973,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":910}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":183974,"byte_end":183979,"line_start":991,"line_end":991,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":912}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":186862,"byte_end":186870,"line_start":1067,"line_end":1067,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":918}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":187063,"byte_end":187069,"line_start":1074,"line_end":1074,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":921}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":13405,"byte_end":13408,"line_start":389,"line_end":389,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":57}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\lib.rs","byte_start":13450,"byte_end":13453,"line_start":392,"line_end":392,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":213}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","byte_start":14686,"byte_end":14698,"line_start":34,"line_end":34,"column_start":19,"column_end":31},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":104},"to":{"krate":1,"index":2878}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","byte_start":15162,"byte_end":15174,"line_start":53,"line_end":53,"column_start":24,"column_end":36},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":104},"to":{"krate":19,"index":607}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","byte_start":16725,"byte_end":16735,"line_start":108,"line_end":108,"column_start":6,"column_end":16},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":117},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","byte_start":20306,"byte_end":20311,"line_start":206,"line_end":206,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":1539},"to":{"krate":0,"index":133}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","byte_start":21130,"byte_end":21140,"line_start":228,"line_end":228,"column_start":25,"column_end":35},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":117},"to":{"krate":0,"index":133}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","byte_start":23782,"byte_end":23790,"line_start":305,"line_end":305,"column_start":19,"column_end":27},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":160},"to":{"krate":2,"index":2179}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","byte_start":24078,"byte_end":24090,"line_start":322,"line_end":322,"column_start":9,"column_end":21},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":167},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","byte_start":25862,"byte_end":25874,"line_start":369,"line_end":369,"column_start":18,"column_end":30},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":167},"to":{"krate":22,"index":1793}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","byte_start":27578,"byte_end":27586,"line_start":425,"line_end":425,"column_start":9,"column_end":17},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":160},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","byte_start":29776,"byte_end":29792,"line_start":503,"line_end":503,"column_start":6,"column_end":22},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":936},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\aio.rs","byte_start":30743,"byte_end":30759,"line_start":529,"line_end":529,"column_start":25,"column_end":41},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":936},"to":{"krate":0,"index":133}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":33314,"byte_end":33318,"line_start":31,"line_end":31,"column_start":22,"column_end":26},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":223},"to":{"krate":0,"index":805}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":34139,"byte_end":34144,"line_start":63,"line_end":63,"column_start":9,"column_end":14},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":941},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":34391,"byte_end":34396,"line_start":73,"line_end":73,"column_start":44,"column_end":49},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":941},"to":{"krate":0,"index":879}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":34941,"byte_end":34946,"line_start":88,"line_end":88,"column_start":38,"column_end":43},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":941},"to":{"krate":0,"index":805}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":35703,"byte_end":35714,"line_start":117,"line_end":117,"column_start":18,"column_end":29},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":246},"to":{"krate":2,"index":2204}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":36757,"byte_end":36770,"line_start":157,"line_end":157,"column_start":6,"column_end":19},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":952},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":38140,"byte_end":38153,"line_start":200,"line_end":200,"column_start":22,"column_end":35},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":952},"to":{"krate":0,"index":805}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":39598,"byte_end":39616,"line_start":257,"line_end":257,"column_start":25,"column_end":43},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":268},"to":{"krate":0,"index":879}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\geo.rs","byte_start":40305,"byte_end":40323,"line_start":279,"line_end":279,"column_start":6,"column_end":24},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":268},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\client.rs","byte_start":43616,"byte_end":43622,"line_start":28,"line_end":28,"column_start":6,"column_end":12},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":961},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\client.rs","byte_start":45607,"byte_end":45613,"line_start":79,"line_end":79,"column_start":25,"column_end":31},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":961},"to":{"krate":0,"index":524}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":46899,"byte_end":46903,"line_start":40,"line_end":40,"column_start":42,"column_end":46},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":319},"to":{"krate":2,"index":3510}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":50868,"byte_end":50871,"line_start":189,"line_end":189,"column_start":21,"column_end":24},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":977},"to":{"krate":0,"index":801}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":51075,"byte_end":51078,"line_start":197,"line_end":197,"column_start":18,"column_end":21},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":977},"to":{"krate":2,"index":2204}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":52038,"byte_end":52041,"line_start":230,"line_end":230,"column_start":6,"column_end":9},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":977},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":58316,"byte_end":58324,"line_start":411,"line_end":411,"column_start":18,"column_end":26},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":984},"to":{"krate":2,"index":2204}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\cmd.rs","byte_start":59374,"byte_end":59382,"line_start":438,"line_end":438,"column_start":6,"column_end":14},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":984},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":105666,"byte_end":105671,"line_start":1005,"line_end":1005,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":1539},"to":{"krate":0,"index":436}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":106671,"byte_end":106672,"line_start":1027,"line_end":1027,"column_start":22,"column_end":23},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":446},"to":{"krate":0,"index":989}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":106725,"byte_end":106735,"line_start":1029,"line_end":1029,"column_start":25,"column_end":35},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":505},"to":{"krate":0,"index":436}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\commands.rs","byte_start":107727,"byte_end":107735,"line_start":1063,"line_end":1063,"column_start":27,"column_end":35},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":984},"to":{"krate":0,"index":1459}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":109146,"byte_end":109160,"line_start":46,"line_end":46,"column_start":6,"column_end":20},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1784},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":110489,"byte_end":110503,"line_start":81,"line_end":81,"column_start":29,"column_end":43},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1799},"to":{"krate":0,"index":487}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":112860,"byte_end":112863,"line_start":151,"line_end":151,"column_start":34,"column_end":37},"kind":{"Impl":{"id":32}},"from":{"krate":44,"index":804},"to":{"krate":0,"index":487}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":114191,"byte_end":114207,"line_start":207,"line_end":207,"column_start":6,"column_end":22},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":501},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":121541,"byte_end":121551,"line_start":411,"line_end":411,"column_start":6,"column_end":16},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":505},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":126201,"byte_end":126211,"line_start":527,"line_end":527,"column_start":25,"column_end":35},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":505},"to":{"krate":0,"index":524}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":127700,"byte_end":127706,"line_start":585,"line_end":585,"column_start":10,"column_end":16},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":509},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":130229,"byte_end":130235,"line_start":654,"line_end":654,"column_start":19,"column_end":25},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":509},"to":{"krate":2,"index":1725}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\connection.rs","byte_start":130438,"byte_end":130441,"line_start":662,"line_end":662,"column_start":6,"column_end":9},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":512},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\parser.rs","byte_start":135167,"byte_end":135179,"line_start":23,"line_end":23,"column_start":24,"column_end":36},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":615},"to":{"krate":2,"index":2204}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\parser.rs","byte_start":135324,"byte_end":135336,"line_start":32,"line_end":32,"column_start":40,"column_end":52},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":615},"to":{"krate":2,"index":3817}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\parser.rs","byte_start":138987,"byte_end":138997,"line_start":144,"line_end":144,"column_start":18,"column_end":28},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1871},"to":{"krate":19,"index":62}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\parser.rs","byte_start":139233,"byte_end":139243,"line_start":153,"line_end":153,"column_start":18,"column_end":28},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1871},"to":{"krate":19,"index":52}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\parser.rs","byte_start":140551,"byte_end":140562,"line_start":192,"line_end":192,"column_start":20,"column_end":31},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":641},"to":{"krate":22,"index":477}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\parser.rs","byte_start":144239,"byte_end":144245,"line_start":291,"line_end":291,"column_start":22,"column_end":28},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":656},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\script.rs","byte_start":146308,"byte_end":146314,"line_start":30,"line_end":30,"column_start":6,"column_end":12},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":684},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\script.rs","byte_start":148421,"byte_end":148437,"line_start":101,"line_end":101,"column_start":10,"column_end":26},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":697},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\script.rs","byte_start":151099,"byte_end":151116,"line_start":193,"line_end":193,"column_start":23,"column_end":40},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":716},"to":{"krate":22,"index":477}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":155193,"byte_end":155198,"line_start":80,"line_end":80,"column_start":6,"column_end":11},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1919},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":156076,"byte_end":156081,"line_start":110,"line_end":110,"column_start":21,"column_end":26},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1919},"to":{"krate":2,"index":7486}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":157449,"byte_end":157459,"line_start":152,"line_end":152,"column_start":20,"column_end":30},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":761},"to":{"krate":2,"index":2039}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":158082,"byte_end":158092,"line_start":170,"line_end":170,"column_start":26,"column_end":36},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":761},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":158247,"byte_end":158257,"line_start":178,"line_end":178,"column_start":26,"column_end":36},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":761},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":158468,"byte_end":158478,"line_start":186,"line_end":186,"column_start":42,"column_end":52},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":761},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":158697,"byte_end":158707,"line_start":194,"line_end":194,"column_start":50,"column_end":60},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":761},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":158932,"byte_end":158942,"line_start":202,"line_end":202,"column_start":23,"column_end":33},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":761},"to":{"krate":1,"index":1599}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":159494,"byte_end":159504,"line_start":220,"line_end":220,"column_start":23,"column_end":33},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":761},"to":{"krate":2,"index":7491}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":160124,"byte_end":160134,"line_start":239,"line_end":239,"column_start":21,"column_end":31},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":761},"to":{"krate":2,"index":7486}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":160308,"byte_end":160318,"line_start":246,"line_end":246,"column_start":6,"column_end":16},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":761},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":164769,"byte_end":164777,"line_start":373,"line_end":373,"column_start":6,"column_end":14},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1962},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":166507,"byte_end":166510,"line_start":428,"line_end":428,"column_start":21,"column_end":24},"kind":{"Impl":{"id":60}},"from":{"krate":5,"index":3763},"to":{"krate":0,"index":801}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":166819,"byte_end":166824,"line_start":437,"line_end":437,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":1539},"to":{"krate":0,"index":805}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":171659,"byte_end":171665,"line_start":597,"line_end":597,"column_start":22,"column_end":28},"kind":{"Impl":{"id":74}},"from":{"krate":5,"index":4325},"to":{"krate":0,"index":805}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":172207,"byte_end":172210,"line_start":624,"line_end":624,"column_start":38,"column_end":41},"kind":{"Impl":{"id":75}},"from":{"krate":5,"index":3763},"to":{"krate":0,"index":805}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":172789,"byte_end":172795,"line_start":650,"line_end":650,"column_start":38,"column_end":44},"kind":{"Impl":{"id":76}},"from":{"krate":2,"index":29045},"to":{"krate":0,"index":805}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":173569,"byte_end":173576,"line_start":678,"line_end":678,"column_start":76,"column_end":83},"kind":{"Impl":{"id":77}},"from":{"krate":1,"index":6096},"to":{"krate":0,"index":805}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":174018,"byte_end":174026,"line_start":694,"line_end":694,"column_start":56,"column_end":64},"kind":{"Impl":{"id":78}},"from":{"krate":5,"index":4211},"to":{"krate":0,"index":805}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":174549,"byte_end":174557,"line_start":711,"line_end":711,"column_start":72,"column_end":80},"kind":{"Impl":{"id":79}},"from":{"krate":5,"index":967},"to":{"krate":0,"index":805}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":177452,"byte_end":177457,"line_start":797,"line_end":797,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":1539},"to":{"krate":0,"index":879}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":180547,"byte_end":180553,"line_start":894,"line_end":894,"column_start":25,"column_end":31},"kind":{"Impl":{"id":93}},"from":{"krate":5,"index":4325},"to":{"krate":0,"index":879}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":180959,"byte_end":180962,"line_start":905,"line_end":905,"column_start":44,"column_end":47},"kind":{"Impl":{"id":94}},"from":{"krate":5,"index":3763},"to":{"krate":0,"index":879}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":181730,"byte_end":181737,"line_start":922,"line_end":922,"column_start":9,"column_end":16},"kind":{"Impl":{"id":95}},"from":{"krate":1,"index":6070},"to":{"krate":0,"index":879}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":182352,"byte_end":182360,"line_start":939,"line_end":939,"column_start":75,"column_end":83},"kind":{"Impl":{"id":96}},"from":{"krate":5,"index":967},"to":{"krate":0,"index":879}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":182993,"byte_end":183000,"line_start":958,"line_end":958,"column_start":82,"column_end":89},"kind":{"Impl":{"id":97}},"from":{"krate":1,"index":6096},"to":{"krate":0,"index":879}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":183493,"byte_end":183501,"line_start":973,"line_end":973,"column_start":56,"column_end":64},"kind":{"Impl":{"id":98}},"from":{"krate":5,"index":4211},"to":{"krate":0,"index":879}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":183974,"byte_end":183979,"line_start":991,"line_end":991,"column_start":25,"column_end":30},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1919},"to":{"krate":0,"index":879}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":186862,"byte_end":186870,"line_start":1067,"line_end":1067,"column_start":25,"column_end":33},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1962},"to":{"krate":0,"index":879}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\redis-0.13.0\\src\\types.rs","byte_start":187063,"byte_end":187069,"line_start":1074,"line_end":1074,"column_start":44,"column_end":50},"kind":{"Impl":{"id":101}},"from":{"krate":2,"index":29045},"to":{"krate":0,"index":879}}]}